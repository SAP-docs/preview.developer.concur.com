{
	"info": {
		"_postman_id": "55bebfd2-f842-49b3-87bf-7b54e95ac6d7",
		"name": "Auth API Samples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2623947"
	},
	"item": [
		{
			"name": "Password Grant - Authtoken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/////////////////////////////////////////////////\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.access_token !== null){\r",
							"    pm.environment.set(\"ACCESS_TOKEN\", jsonData.access_token);\r",
							"    const accessToken = parseJWT(jsonData.access_token);\r",
							"    console.log(\"Access Token: \" + JSON.stringify(accessToken));\r",
							"\r",
							"    const aTokenExpDate = new Date(accessToken.exp*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Access Token Expired = \"+ aTokenExpDate);\r",
							"    pm.environment.set(\"ACCESS_TOKEN_EXP\", aTokenExpDate);\r",
							"\r",
							"    pm.environment.set(\"REFRESH_TOKEN\", jsonData.refresh_token);\r",
							"    const rTokenExpDate = new Date(jsonData.refresh_expires_in*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Refresh Token Expired = \"+ rTokenExpDate);\r",
							"    pm.environment.set(\"REFRESH_TOKEN_EXP\", rTokenExpDate);\r",
							"    //////////////////////////////////////////////////\r",
							"    console.log(\"getlocation : \"+jsonData.geolocation);\r",
							"    //////////////////////////////////////////////////\r",
							"    const idToken = parseJWT(jsonData.id_token);\r",
							"    console.log(\"ID Token : \" + JSON.stringify(idToken));\r",
							"    console.log(\"UUID = \"+idToken.sub);\r",
							"    pm.environment.set(\"UUID\", idToken.sub);\r",
							"}\r",
							"\r",
							"/////////////////////////////////////////////////\r",
							"console.log(\"concur-correlationid : \"+pm.response.headers.get(\"concur-correlationid\"));\r",
							"\r",
							"///////////////////////////////////////////////////\r",
							"function parseJWT (token) {\r",
							"    var base64Url = token.split('.')[1];\r",
							"    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r",
							"    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r",
							"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r",
							"    }).join(''));\r",
							"\r",
							"    return JSON.parse(jsonPayload);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "credtype",
							"value": "authtoken",
							"type": "text"
						},
						{
							"key": "username",
							"value": "b39ba8c9-0383-4b62-b384-37bcce4c060c",
							"type": "text"
						},
						{
							"key": "password",
							"value": "at-3wd0qnp3x6m5klel2vv5z083pex5py",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/token",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"token"
					]
				},
				"description": "The customer will click on \"Connect\" from App Center. The page that is refreshed is the re-direct URL page that the Partner provides as part of their App setup. This page is what the partner will use to get the following info in order to then make a request to get a token:\n1. UUID - the value for each company (also within HMC by clicking on entity code) when getting a Company-level JWT. In this example for Platform Services2: 144dbb35-0e4c-4e9e-93cb-4b76fa7101d1\n2. Request Token: this value is plugged into the \"password\" key section of the Postman Body. 8609351ef580483c89d9ceab33a7142c\n\nPartner gets an Access Token, Refresh Token, ID Token, etc.  They should save the Refresh token and date."
			},
			"response": []
		},
		{
			"name": "Auth Grant - Get Auth Page",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/authorize?client_id={{APP_ID}}&redirect_uri=https://localhost&response_type=code",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}"
						},
						{
							"key": "redirect_uri",
							"value": "https://localhost"
						},
						{
							"key": "response_type",
							"value": "code"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Grant - Exchange Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"/////////////////////////////////////////////////",
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.access_token !== null){",
							"    pm.environment.set(\"ACCESS_TOKEN\", jsonData.access_token);",
							"    const accessToken = parseJWT(jsonData.access_token);",
							"    console.log(\"Access Token: \" + JSON.stringify(accessToken));",
							"",
							"    const aTokenExpDate = new Date(accessToken.exp*1000).toLocaleString(\"en-US\");",
							"    console.log(\"Access Token Expired = \"+ aTokenExpDate);",
							"    pm.environment.set(\"ACCESS_TOKEN_EXP\", aTokenExpDate);",
							"",
							"    pm.environment.set(\"REFRESH_TOKEN\", jsonData.refresh_token);",
							"    const rTokenExpDate = new Date(jsonData.refresh_expires_in*1000).toLocaleString(\"en-US\");",
							"    console.log(\"Refresh Token Expired = \"+ rTokenExpDate);",
							"    pm.environment.set(\"REFRESH_TOKEN_EXP\", rTokenExpDate);",
							"    //////////////////////////////////////////////////",
							"    console.log(\"getlocation : \"+jsonData.geolocation);",
							"    //////////////////////////////////////////////////",
							"    const idToken = parseJWT(jsonData.id_token);",
							"    console.log(\"ID Token : \" + JSON.stringify(idToken));",
							"    console.log(\"UUID = \"+idToken.sub);",
							"    pm.environment.set(\"UUID\", idToken.sub);",
							"}",
							"",
							"/////////////////////////////////////////////////",
							"console.log(\"concur-correlationid : \"+pm.response.headers.get(\"concur-correlationid\"));",
							"",
							"///////////////////////////////////////////////////",
							"function parseJWT (token) {",
							"    var base64Url = token.split('.')[1];",
							"    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
							"    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
							"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
							"    }).join(''));",
							"",
							"    return JSON.parse(jsonPayload);",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "{{REDIRECT_URI}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "code",
							"value": "{{CODE}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/token",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"token"
					]
				},
				"description": "The customer will click on \"Connect\" from App Center. The page that is refreshed is the re-direct URL page that the Partner provides as part of their App setup. This page is what the partner will use to get the following info in order to then make a request to get a token:\n1. UUID - the value for each company (also within HMC by clicking on entity code) when getting a Company-level JWT. In this example for Platform Services2: 144dbb35-0e4c-4e9e-93cb-4b76fa7101d1\n2. Request Token: this value is plugged into the \"password\" key section of the Postman Body. 8609351ef580483c89d9ceab33a7142c\n\nPartner gets an Access Token, Refresh Token, ID Token, etc.  They should save the Refresh token and date."
			},
			"response": []
		},
		{
			"name": "OTP Grant - Request One Time Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"type": "text"
						},
						{
							"key": "channel_type",
							"value": "email",
							"type": "text"
						},
						{
							"key": "channel_handle",
							"value": "{{EMAIL1}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{user_name_in_email}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "{{company_name_in_email}}",
							"type": "text"
						},
						{
							"key": "link",
							"value": "{{call_back_URL}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/otp",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"otp"
					]
				},
				"description": "The customer will click on \"Connect\" from App Center. The page that is refreshed is the re-direct URL page that the Partner provides as part of their App setup. This page is what the partner will use to get the following info in order to then make a request to get a token:\n1. UUID - the value for each company (also within HMC by clicking on entity code) when getting a Company-level JWT. In this example for Platform Services2: 144dbb35-0e4c-4e9e-93cb-4b76fa7101d1\n2. Request Token: this value is plugged into the \"password\" key section of the Postman Body. 8609351ef580483c89d9ceab33a7142c\n\nPartner gets an Access Token, Refresh Token, ID Token, etc.  They should save the Refresh token and date."
			},
			"response": []
		},
		{
			"name": "OTP Grant - Request Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/////////////////////////////////////////////////\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.access_token !== null){\r",
							"    pm.environment.set(\"ACCESS_TOKEN\", jsonData.access_token);\r",
							"    const accessToken = parseJWT(jsonData.access_token);\r",
							"    console.log(\"Access Token: \" + JSON.stringify(accessToken));\r",
							"\r",
							"    const aTokenExpDate = new Date(accessToken.exp*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Access Token Expired = \"+ aTokenExpDate);\r",
							"    pm.environment.set(\"ACCESS_TOKEN_EXP\", aTokenExpDate);\r",
							"\r",
							"    pm.environment.set(\"REFRESH_TOKEN\", jsonData.refresh_token);\r",
							"    const rTokenExpDate = new Date(jsonData.refresh_expires_in*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Refresh Token Expired = \"+ rTokenExpDate);\r",
							"    pm.environment.set(\"REFRESH_TOKEN_EXP\", rTokenExpDate);\r",
							"    //////////////////////////////////////////////////\r",
							"    console.log(\"getlocation : \"+jsonData.geolocation);\r",
							"    //////////////////////////////////////////////////\r",
							"    const idToken = parseJWT(jsonData.id_token);\r",
							"    console.log(\"ID Token : \" + JSON.stringify(idToken));\r",
							"    console.log(\"UUID = \"+idToken.sub);\r",
							"    pm.environment.set(\"UUID\", idToken.sub);\r",
							"}\r",
							"\r",
							"/////////////////////////////////////////////////\r",
							"console.log(\"concur-correlationid : \"+pm.response.headers.get(\"concur-correlationid\"));\r",
							"\r",
							"///////////////////////////////////////////////////\r",
							"function parseJWT (token) {\r",
							"    var base64Url = token.split('.')[1];\r",
							"    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r",
							"    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r",
							"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r",
							"    }).join(''));\r",
							"\r",
							"    return JSON.parse(jsonPayload);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"description": "Required The client_id as defined in the SAP Concur application management system.",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"description": "Required The client_secret as set by the client owner in the SAP Concur application management system.",
							"type": "text"
						},
						{
							"key": "channel_handle",
							"value": "{{EMAIL1}}",
							"type": "text"
						},
						{
							"key": "channel_type",
							"value": "email",
							"description": "Required The type of messaging system to use. Currently only email is valid",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "otp",
							"description": "Required The grant type being used, specifically for this approach: otp.",
							"type": "text"
						},
						{
							"key": "otp",
							"value": "{{otp_one_time_token}}",
							"description": "Required The one-time token provided as a result of the Send a one time token to the user method.",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/token",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.6 Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/////////////////////////////////////////////////\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.access_token !== null){\r",
							"    pm.environment.set(\"ACCESS_TOKEN\", jsonData.access_token);\r",
							"    const accessToken = parseJWT(jsonData.access_token);\r",
							"    console.log(\"Access Token: \" + JSON.stringify(accessToken));\r",
							"\r",
							"    const aTokenExpDate = new Date(accessToken.exp*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Access Token Expired = \"+ aTokenExpDate);\r",
							"    pm.environment.set(\"ACCESS_TOKEN_EXP\", aTokenExpDate);\r",
							"\r",
							"    pm.environment.set(\"REFRESH_TOKEN\", jsonData.refresh_token);\r",
							"    const rTokenExpDate = new Date(jsonData.refresh_expires_in*1000).toLocaleString(\"en-US\");\r",
							"    console.log(\"Refresh Token Expired = \"+ rTokenExpDate);\r",
							"    pm.environment.set(\"REFRESH_TOKEN_EXP\", rTokenExpDate);\r",
							"    //////////////////////////////////////////////////\r",
							"    console.log(\"getlocation : \"+jsonData.geolocation);\r",
							"    //////////////////////////////////////////////////\r",
							"    const idToken = parseJWT(jsonData.id_token);\r",
							"    console.log(\"ID Token : \" + JSON.stringify(idToken));\r",
							"    console.log(\"UUID = \"+idToken.sub);\r",
							"    pm.environment.set(\"UUID\", idToken.sub);\r",
							"}\r",
							"\r",
							"/////////////////////////////////////////////////\r",
							"console.log(\"concur-correlationid : \"+pm.response.headers.get(\"concur-correlationid\"));\r",
							"\r",
							"///////////////////////////////////////////////////\r",
							"function parseJWT (token) {\r",
							"    var base64Url = token.split('.')[1];\r",
							"    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r",
							"    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r",
							"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r",
							"    }).join(''));\r",
							"\r",
							"    return JSON.parse(jsonPayload);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"description": "App ID",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"description": "App Secret",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{REFRESH_TOKEN}}",
							"description": "Company Level Refresh Token",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/oauth2/v0/token",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"oauth2",
						"v0",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.7 Revoke Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{APP_ID}}",
							"description": "App ID",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{APP_SECRET}}",
							"description": "App Secret",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{REFRESH_TOKEN}}",
							"description": "Company Level Refresh Token",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{HOST}}/app-mgmt/v0/connections",
					"protocol": "https",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"app-mgmt",
						"v0",
						"connections"
					]
				}
			},
			"response": []
		}
	]
}