{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Expense Report Service",
    "description" : "<b>Expense Report Service (ERS) is the next-generation v4 API for operations related to  creating and processing Expense Reports</b>. In order to interact with this API, a client  must include either an authorized User or Company JWT in the header of each request, or  use an X.509 client certificate with a CN included in the Allowed List by the ERS team.\n",
    "termsOfService" : "",
    "contact" : {
      "email" : "expensereportservice@sap.onmicrosoft.com"
    },
    "license" : {
      "name" : "SAP Concur",
      "url" : ""
    },
    "version" : "4.14.0"
  },
  "externalDocs" : {
    "description" : "Expense Report Service Readme",
    "url" : "https://github.concur.com/inception/expense-report-service"
  },
  "servers" : [ {
    "url" : "http://localhost:9091",
    "description" : "Generated server url"
  } ],
  "security" : [ {
    "api_key" : [ "read", "write" ]
  } ],
  "tags" : [ {
    "name" : "Comments",
    "description" : "Comments API "
  }, {
    "name" : "Workflows",
    "description" : "Workflows API"
  }, {
    "name" : "Expenses",
    "description" : "Report Expenses API"
  }, {
    "name" : "Reports",
    "description" : "Reports API "
  }, {
    "name" : "Workflows",
    "description" : "Workflows API "
  }, {
    "name" : "Allocations",
    "description" : "Allocations API"
  } ],
  "paths" : {
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/workflow" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/comments" : {
      "get" : {
        "tags" : [ "Comments" ],
        "summary" : "Gets comments for the specified expense",
        "description" : "Returns comments for the specified expense.",
        "operationId" : "getReportEntryComments",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Specified context not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Comments successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CommentDetails"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type,\nUser is not authorized to access this report with this context type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found,\nexpenseId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/comments" : {
      "get" : {
        "tags" : [ "Comments" ],
        "summary" : "Gets comments for the specified report",
        "description" : "Returns comments for the specified report.",
        "operationId" : "getReportComments",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeAllComments",
          "in" : "query",
          "description" : "Return all the comments that are present on the report at all levels",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "false"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Specified context not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Comments successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CommentDetails"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type,\nUser is not authorized to access this report with this context type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/reports/{reportId}/expenses/{expenseId}/exceptions" : { },
    "/expensereports/v4/reports/{reportId}/expenses/{expenseId}/allocations/{allocationId}/exceptions" : { },
    "/expensereports/v4/reports/{reportId}/exceptions" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports" : {
      "post" : {
        "tags" : [ "Reports" ],
        "summary" : "Creates a new report for the specified user",
        "description" : "Creates a new report for the specified user.",
        "operationId" : "postNewReport",
        "parameters" : [ {
          "name" : "idempotency-id",
          "in" : "header",
          "description" : "The unique identifier for this request. Utilizing this identifier ensures that you do not create duplicate resources when you pass the same value",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewReport"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Specified context not supported,\nInvalid field value specified,\nUser does not have proper role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409" : {
            "description" : "Your previous request having this idempotency-id is still in-progress. Please retry your request after sometime to get the resource link (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201" : {
            "description" : "Report successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/travelDiaries" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/requests" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses" : {
      "get" : {
        "tags" : [ "Expenses" ],
        "summary" : "Gets all expense summaries for the specified report",
        "description" : "Returns all expense summaries for the specified report. Includes a link to expense details for each expense and a link to itemizations for each parent expense.",
        "operationId" : "getReportExpensesSummary",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeItemizations",
          "in" : "query",
          "description" : "Include all itemizations of an Expense, if any",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "false", "true" ],
            "default" : "false"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Specified context not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Expense summaries successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportEntrySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nUser is not allowed to access this report ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/copy" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/attendees" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/allocations" : {
      "get" : {
        "tags" : [ "Allocations" ],
        "summary" : "Gets all allocations for the specified expense",
        "description" : "Returns all allocations for the specified expense.",
        "operationId" : "getAllocations",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nUser is not authorized to access this report with this context type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid expenseId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Allocations successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Allocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/bulk" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/copy" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/cashAdvances" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/allocations" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/allocationFavorites" : { },
    "/expensereports/v4/task-provider/tasks/{taskUrn}/response" : { },
    "/expensereports/v4/companies/{companyId}/reports/{reportId}/paymentConfirmations" : { },
    "/expensereports/v4/users/{userId}/reports/{reportId}/unmarkDelegateReviewed" : { },
    "/expensereports/v4/users/{userId}/reports/{reportId}/markDelegateReviewed" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Gets report details for the specified report.",
        "description" : "Returns report details for the specified report. Also returns a self link, plus each of the following links, contingent on the existence of the resource: comments, exceptions, expenses, formFields.",
        "operationId" : "getReportDetails",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "PROCESSOR" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Specified context not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type,\nUser is not allowed to access this report ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Report details successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportForm"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/workflowSteps/{stepId}" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/unmarkDelegateReviewed" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/travelDiaries/{travelDiaryId}" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/submit" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/sendBack" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/recall" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/markReceiptsReviewed" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/markDelegateReviewed" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}" : {
      "get" : {
        "tags" : [ "Expenses" ],
        "summary" : "Gets expense details for the specified expense",
        "description" : "Returns expense details for the specified expense. Also returns a self link, plus each of the following links, contingent on the existence of the resource: allocations, attendees, comments, exceptions, formFields, itemizations, tax.",
        "operationId" : "getReportExpenseDetail",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Specified context not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found\n\nexpenseId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nUser is not allowed to access this report ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Expense details successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportEntryDetail"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/move" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/markReceiptReviewed" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/associateImage" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/allocations/{allocationId}" : {
      "patch" : {
        "tags" : [ "Allocations" ],
        "summary" : "Updates the specified allocation for the specified expense",
        "description" : "Updates the specified allocation for the specified expense.",
        "operationId" : "updateAllocation",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report that contains the expense associated with the allocations",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense associated with the allocations",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "allocationId",
          "in" : "path",
          "description" : "The unique identifier of the expense allocation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAllocation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Specified context not supported\n\nInvalid field value specified\n\nInvalid allocationId\n\nInvalid expenseId\n\nUser does not have proper role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nSystem allocation cannot be modified\n\nUser is not authorized to access this report with this context type\n\nCaller does not have access permissions to perform the requested allocation operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found\n\nexpenseId not found\n\nallocationId not found\n\nThe policy of the specified report does not have an allocation form defined. Contact your Concur Administrator",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "204" : {
            "description" : "Successfully updated the expense allocation"
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/combineExpenses" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/associateImage" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/approve" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/allocations/{allocationId}" : {
      "get" : {
        "tags" : [ "Allocations" ],
        "summary" : "Gets specified allocation for the specified report.",
        "description" : "Returns specified allocation for the specified report.",
        "operationId" : "getAllocationById",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "allocationId",
          "in" : "path",
          "description" : "The unique identifier of the expense allocation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nUser is not authorized to access this report with this context type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid expenseId\n\nInvalid allocationId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200" : {
            "description" : "Allocation successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportAllocationResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found\n\nallocationId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/allocationFavorites/{allocationFavoriteId}" : { },
    "/expensereports/v4/reports/{reportId}" : { },
    "/expensereports/v4/reports/{reportId}/sendBack" : {
      "patch" : {
        "tags" : [ "Workflows" ],
        "summary" : "Sends back the specified report",
        "description" : "Sends back the specified report to report owner.",
        "operationId" : "sendBackReportAsSystem",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendBackReportAsSystem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Specified context not supported\n\nInvalid reportId\n\nerror.workflow.noComments: Cannot send report back without providing comments. Add a comment to explain why you are returning the report\n\nno_approver: You must identify an approver before the expense report moves on to the next workflow step\n\ninvalid_auth_approver: This report cannot be sent to the next approver. This workflow step must be approved by a specialized approver called an Authorized Approver. The selected approver is not an Authorized Approver. Select another approver\n\nno_approver.not_editable_step: There are no approvers defined in your workflow. Please contact your Expense administrator\n\nwf_config_invalid_next_step: You must identify an approver before the expense report moves on to the next workflow step\n\nnot_an_approver: This report cannot be sent to the next approver because the selected approver is no longer authorized to approve reports. Please select another approver\n\nerror.workflow.invalid_report_key: The expense report no longer exists in the system\n\nerror.workflow.missing_alloc_reqd_fields: At least one required allocation field in this report lacks data. Please provide the appropriate value, and then approve the report\n\nreports.workflow.invalidFGIStep: The action cannot be executed because expense report is not in valid FGI obligation step\n\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Caller cannot modify System workflow step",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "204" : {
            "description" : "Report successfully sent back"
          }
        }
      }
    },
    "/expensereports/v4/reports/{reportId}/expenses/{expenseId}" : {
      "patch" : {
        "tags" : [ "Expenses" ],
        "summary" : "Updates (limited fields) the specified expense in an un-submitted or submitted report",
        "description" : "Updates the specified expense in an un-submitted or submitted report and is restricted to modify 'Business Purpose', 'Custom/Org unit' and 'Expense Rejected' fields only",
        "operationId" : "updateReportExpenseUsingShortURL",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateReportExpense"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid field value specified\n\nCannot perform the operation as the report is already paid\n\nCannot replace receipt affidavit with receipt image",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "204" : {
            "description" : "Successfully updated the report expense"
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found\n\nexpenseId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409" : {
            "description" : "Your request cannot be processed as the specified resource is locked for another process.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "User is not allowed to modify the reopened report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/reports/{reportId}/approve" : {
      "patch" : {
        "tags" : [ "Workflows" ],
        "summary" : "Approves the specified report to the next step if it is in a system step",
        "description" : "Advances the specified report to the next step if it is in a system step.",
        "operationId" : "approveReportAsSystem",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApproveReportAsSystem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "204" : {
            "description" : "Report successfully approved"
          },
          "400" : {
            "description" : "Specified context not supported\n\nerror.submit.Generic: An error occurred while submitting the selected report. The report was not submitted\n\nerror.submit.no_entries: The expense report has no expenses. You must create at least one expense in order to submit the report\n\nerror.workflow.no_clearingcode: Either the credit card account or the payment type is missing a clearing account code. Contact your Expense administrator\n\nerror.workflow.invalid_action: The action cannot be executed because it is not valid for the report workflow\n\nerror.workflow.incomplete_receipt_review: You have not finished reviewing all the receipts in this report.  Your company requires that you review receipts during approval\n\nerror.submit.rptXctMaxThreshold: This expense report cannot be submitted until all blocking exceptions are resolved\n\nerror.submit.entryXctMaxThreshold: This expense report cannot be submitted until all blocking exceptions are resolved\n\nerror.submit.undefined_expense_type: The expense report contains one or more expenses with an expense type of Undefined. You must select an expense type for each expense before you can submit the report\n\nerror.submit.missing_reqd_fields: At least one required field in this report is empty. Please provide a value and then submit the report\n\nerror.submit.missing_alloc_reqd_fields: At least one required allocation field in this report is empty. Please provide the appropriate value, and then submit the report\n\nerror.submit.missingKids: This report contains a Lodging expense that is not itemized. Lodging expenses must be itemized in the report before it can be submitted\n\nerror.submit.itemDiff: The expense report contains at least one itemized expense. The itemization amounts do not add up to the expense amount. Edit the itemized entries to make the required changes before submitting the report\n\nerror.submit.itemMissing: This report cannot be submitted because one or more entries must be itemized. Itemize the entries and then submit the report\n\nerror.submit.alreadySubmitted: The report has already been submitted and cannot be submitted again\n\nerror.submit.cannotSubmitAsDelegate: The report cannot be submitted by the Delegate\n\nerror.submit.cashadvance_cant_carry_balance: Cash Advances must be entirely utilized or returned. Please enter a Cash Advance Return on this report to return the remaining balance\n\nerror.submit.cashadvance_negative_balance: The Cash Advance Balance is negative because a Cash Advance Return is greater than the remaining balance. Either enter a Currency Gain/Loss expense to bring the balance to zero or adjust the Cash Advance Return amount to bring the balance to zero. Then, click Submit again\n\nerror.submit.single_row_itinerary: This report contains at least one itinerary with a single itinerary row. An itinerary is not valid until it has at least two rows. Please add another row to complete the itinerary\n\nerror.submit.invalidAttendeeType: This report contains at least one entry with an attendee of an invalid type.  Please remove the attendee(s) before submitting the report\n\ninfo.submit.notify_by_delegate: A notification has been sent to the employee\n\ncannot_approve_your_own_report: This expense report was created by you. You cannot approve your own report\n\nno_approver: You must identify an approver before the expense report moves on to the next workflow step\n\ninvalid_auth_approver: This report cannot be sent to the next approver. This workflow step must be approved by a specialized approver called an Authorized Approver. The selected approver is not an Authorized Approver. Select another approver\n\nno_approver.not_editable_step: There are no approvers defined in your workflow. Please contact your Expense administrator\n\nno_approver.change_my_info: Missing the required approver for next workflow step. You may be able to select an approver; otherwise contact your Expense administrator for assistance\n\nwf_config_invalid_next_step: You must identify an approver before the expense report moves on to the next workflow step\n\nnot_an_approver: This report cannot be sent to the next approver because the selected approver is no longer authorized to approve reports. Please select another approver\n\napprover_cum_reportowner: You cannot send this report to this approver since this person created this report\n\napprover_cum_reportowner.is_editableby: Your workflow is configured such that the report would come back to the report owner during some step. Please contact your Employee Administrator to change the approvers\n\ninstance_out_of_date: The approval workflow that this expense report uses has changed. Please select a new approver in order to approve and process this expense report\n\nreview_approval_flow_approver: Review Approvers in the workflow\n\ncost_object_step: The next approval step is a Cost object step and cannot be approved through Mobile\n\nstep_exit_blocking_by_exception: One or more blocking exceptions are preventing approval submission. Resolve the exception before proceeding\n\nreceiptimagehold.workflow.noapprover: Missing the required approver for next step. Cannot advance report out of imaging hold. Contact your Expense administrator for assistance\n\nerror.workflow.invalid_report_key: The expense report no longer exists in the system\n\nattendee_total_error: This report contains at least one entry with invalid attendee amounts.  Please correct the attendee amounts before approving\n\napprover_cashadvance_owner.is_editableby: Your workflow is configured such that the cash advance would come back to the cash advance owner during some step. Please contact your Employee Administrator to change the approvers\n\nerror.workflow.missing_alloc_reqd_fields: At least one required allocation field in this report lacks data. Please provide the appropriate value, and then approve the report\n\nerror.recall.cannotRecall: Expense report cannot be recalled\n\nerror.workflow.noComments: Cannot send report back without providing comments. Add a comment to explain why you are returning the report\n\nstatusId.invalidValue: Invalid 'statusId' value specified\n\ninvalid.approverId.query: Unable to find approver for the specified user id in the query string parameter.\n\ninvalidAction.currentStep: Approve and Forward operation ('forwardToUserId' querystring parameter in the request) is not supported on this workflow step.\n\nerror.workflow.missingComments: Comments are required to approve this report.\n\nerror.workflow.rejectedExpenseMissingComments: Some of the expenses were rejected on this report and expenseRejectedComment is required to approve this report.\n\nerror.workflow.CostObjectChangeMissingComments: Changes were made on this report that impact Cost Objects and a comment is required to approve this report.\n\nerror.workflow.BudgetObjectChangeMissingComments: Changes were made on this report that impact Budget Objects and a comment is required to approve this report.\n\nreports.workflow.invalidFGIStep: The action cannot be executed because expense report is not in valid FGI obligation step\n\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Caller cannot modify System workflow step",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/reports/{reportId}/costObjects" : { },
    "/expensereports/v4/users/{userId}/reports/{reportId}/costObjectsForApprover" : {
      "get" : {
        "tags" : [ "Workflows" ],
        "summary" : "Gets the cost object details for the specified report.",
        "description" : "Returns the cost object details for the specified report.",
        "operationId" : "getCostObjectsForApprover",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Cost object details successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CostObjectForApprover"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "User is not allowed to access this report ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/requests/{requestId}" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reportsToApprove" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/workflowTransitions" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/workflowSteps/{stepId}/approvers" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/totals" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/tax/new" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/tax/formFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/reimbursableAllowanceExpenses" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/formFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/tax" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/itemizations" : {
      "get" : {
        "tags" : [ "Expenses" ],
        "summary" : "Gets a list of itemization summaries for the specified expense",
        "description" : "Returns a list of itemization summaries for the specified expense. Also returns a self link",
        "operationId" : "getReportExpenseItemizationsSummary",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The unique identifier of the report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expenseId",
          "in" : "path",
          "description" : "The unique identifier of the expense",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The unique identifier of the Concur user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contextType",
          "in" : "path",
          "description" : "The access level of the Concur user, which determines the form fields they can view/modify",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          }
        }, {
          "name" : "accept-language",
          "in" : "header",
          "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Itemization summaries successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportEntryItemizationSummary"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Specified context not supported\n\nInvalid reportId\n\nInvalid expenseId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error. Retry your request again",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid authorization header",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "reportId not found\n\nexpenseId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Specified context type is invalid for this API. Review the documentation for supported context type\n\nUser is not allowed to access this report ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/formFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/exceptions" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/attendees/new" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/{expenseId}/allocations/new" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/new" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenses/formFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/expenseDetailViewFormFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/exceptions" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/auditTrail" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/allocationTotals" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/allocationFormFields" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/odata" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/new" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/formFields" : { },
    "/expensereports/v4/task-provider/tasks" : { },
    "/expensereports/v4/task-provider/tasks/{taskUrn}" : { },
    "/expensereports/v4/task-provider/tasks/{taskUrn}/details" : { },
    "/expensereports/v4/task-provider/taskDefinitions/{taskDefinitionUrn}" : { },
    "/expensereports/v4/task-provider/task-definitions/{taskDefinitionUrn}" : { },
    "/expensereports/v4/task-provider/taskDefinitions" : { },
    "/expensereports/v4/task-provider/task-definitions" : { },
    "/expensereports/v4/task-provider/capabilities" : { },
    "/expensereports/v4/reports" : { },
    "/expensereports/v4/reports/{reportId}/access" : { },
    "/expensereports/v4/expenses" : { },
    "/expensereports/v4/users/{userId}/context/{contextType}/reports/{reportId}/receiptImage" : { },
    "/expensereports/v4/reports/{reportId}/expenses/{expenseId}/exceptions/{exceptionCode}" : { },
    "/expensereports/v4/reports/{reportId}/expenses/{expenseId}/allocations/{allocationId}/exceptions/{exceptionCode}" : { },
    "/expensereports/v4/reports/{reportId}/exceptions/{exceptionCode}" : { }
  },
  "components" : {
    "schemas" : {
      "UpdateWorkflowInstance" : {
        "required" : [ "processInstanceId", "stepInstances" ],
        "type" : "object",
        "properties" : {
          "processInstanceId" : {
            "type" : "string",
            "description" : "Workflow instance id"
          },
          "stepInstances" : {
            "type" : "array",
            "description" : "Steps in the workflow instance. All existing workflow steps must be passed in the correct order, even if they're not being updated. If a step is being added or deleted, the sequence order of the existing steps following the added step must be adjusted accordingly",
            "items" : {
              "$ref" : "#/components/schemas/UpdateWorkflowStepInstance"
            }
          }
        },
        "description" : "Workflow instance"
      },
      "UpdateWorkflowStepInstance" : {
        "required" : [ "isDeleted", "sequenceOrder", "stepId" ],
        "type" : "object",
        "properties" : {
          "stepId" : {
            "type" : "string",
            "description" : "Identifier of the step that this is an instance of. If this is a user added step, this must be equal to the step id of the corresponding workflow's user added step identifier"
          },
          "sequenceOrder" : {
            "type" : "integer",
            "description" : "Sequence of this step in the workflow",
            "format" : "int32"
          },
          "approverId" : {
            "type" : "string",
            "description" : "Approver employee identifier"
          },
          "isUserAdded" : {
            "type" : "boolean",
            "description" : "Boolean indicating if this step should be added to the workflow"
          },
          "isDeleted" : {
            "type" : "boolean",
            "description" : "Boolean indicating if this step should be deleted"
          },
          "stepInstanceId" : {
            "type" : "string",
            "description" : "Step instance identifier, must be null for a user added step"
          },
          "subWorkflowInstances" : {
            "type" : "array",
            "description" : "List of sub workflow instances, for example, cost object workflows",
            "items" : {
              "$ref" : "#/components/schemas/UpdateWorkflowInstance"
            }
          }
        },
        "description" : "Steps in the workflow instance. All existing workflow steps must be passed in the correct order, even if they're not being updated. If a step is being added or deleted, the sequence order of the existing steps following the added step must be adjusted accordingly"
      },
      "SaveWorkflowInstanceResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the created/updated workflow instance resource"
          }
        }
      },
      "ErrorMessage" : {
        "required" : [ "errorMessage", "httpStatus", "path", "timestamp" ],
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "string",
            "description" : "The time when the error was captured",
            "format" : "date-time"
          },
          "httpStatus" : {
            "type" : "string",
            "description" : "The http response code and phrase for the response"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "The detailed error message"
          },
          "errorId" : {
            "type" : "string",
            "description" : "The unique identifier of the error associated with the response or is it error response itself"
          },
          "validationErrors" : {
            "type" : "array",
            "description" : "The validation error messages",
            "items" : {
              "$ref" : "#/components/schemas/ValidationError"
            }
          },
          "customResponseData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "The custom parameters related to error"
            },
            "description" : "The custom parameters related to error"
          },
          "path" : {
            "type" : "string",
            "description" : "The URI of the attempted request"
          }
        }
      },
      "ValidationError" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "string",
            "description" : "The type of validation which failed"
          },
          "message" : {
            "type" : "string",
            "description" : "The detailed message of the validation error"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of the validation error"
          }
        },
        "description" : "The validation error messages"
      },
      "Comment" : {
        "required" : [ "comment" ],
        "type" : "object",
        "properties" : {
          "comment" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The comments input on the report/expense by all users"
          }
        },
        "description" : "Comment body"
      },
      "CommentSaveResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the Comment"
          }
        }
      },
      "Exceptions" : {
        "required" : [ "exceptionCode", "exceptionVisibility" ],
        "type" : "object",
        "properties" : {
          "exceptionCode" : {
            "maxLength" : 8,
            "minLength" : 1,
            "type" : "string",
            "description" : "The code for the exception"
          },
          "exceptionVisibility" : {
            "type" : "string",
            "description" : "The visibility of the exception to be added. Possible values: 'ALL' - The exception is visible to the Traveler, Approver, and Processor, 'APPROVER_PROCESSOR' - The exception is visible only to the Approver and Processor, 'PROCESSOR' - The exception is visible only to the Processor. Default value: ALL",
            "enum" : [ "ALL", "APPROVER_PROCESSOR", "PROCESSOR" ]
          }
        },
        "description" : "Exception body"
      },
      "CustomData" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the custom field e.g. 'custom1', 'orgUnit1'"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the custom field. This field can have values for all the supported data types such as 'text', 'integer', 'boolean' and 'listItemId'. Maximum length: 48 characters"
          },
          "isValid" : {
            "type" : "boolean",
            "description" : "Whether the value returned is valid or not. This value is returned for custom fields of all data types and is specifically evaluated for list items to represent the current status. Default value: true",
            "readOnly" : true
          },
          "listItemUrl" : {
            "type" : "string",
            "description" : "href (string): The URL of the related HATEOAS link that you can use for subsequent calls",
            "readOnly" : true
          }
        },
        "description" : "The unique id of Fuel Type"
      },
      "NewReport" : {
        "required" : [ "name", "policyId" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "comment" : {
            "type" : "string",
            "description" : "The expense report comment added by the user"
          },
          "country" : {
            "type" : "string",
            "description" : "The country name associated with the report (localized as per accept-language header)",
            "readOnly" : true
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The location country ISO 3166-1 code (https://en.wikipedia.org/wiki/ISO_3166-1)"
          },
          "countrySubDivisionCode" : {
            "type" : "string",
            "description" : "The location country sub division ISO 3166-2 code (https://en.wikipedia.org/wiki/ISO_3166-2)"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "policy" : {
            "type" : "string",
            "description" : "The policy name to which the report adheres to",
            "readOnly" : true
          },
          "policyId" : {
            "type" : "string",
            "description" : "The unique identifier of the policy that applies to this report"
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          }
        },
        "description" : "Report body"
      },
      "NewReportResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the report"
          }
        }
      },
      "NewWorkflowInstance" : {
        "required" : [ "stepInstances" ],
        "type" : "object",
        "properties" : {
          "stepInstances" : {
            "type" : "array",
            "description" : "Steps in the workflow instance",
            "items" : {
              "$ref" : "#/components/schemas/NewWorkflowStepInstance"
            }
          }
        },
        "description" : "Workflow instance"
      },
      "NewWorkflowStepInstance" : {
        "required" : [ "isDeleted", "sequenceOrder", "stepId" ],
        "type" : "object",
        "properties" : {
          "stepId" : {
            "type" : "string",
            "description" : "Identifier of the step that this is an instance of. If this is a user added step, this must be equal to the step id of the corresponding workflow's user added step identifier"
          },
          "sequenceOrder" : {
            "type" : "integer",
            "description" : "Sequence of this step in the workflow",
            "format" : "int32"
          },
          "approverId" : {
            "type" : "string",
            "description" : "Approver employee identifier"
          },
          "isUserAdded" : {
            "type" : "boolean",
            "description" : "Boolean indicating if this step should be added to the workflow"
          },
          "isDeleted" : {
            "type" : "boolean",
            "description" : "Boolean indicating if this step should be deleted"
          },
          "subWorkflowInstances" : {
            "type" : "array",
            "description" : "List of sub workflow instances, for example, cost object workflows",
            "items" : {
              "$ref" : "#/components/schemas/NewWorkflowInstance"
            }
          }
        },
        "description" : "Steps in the workflow instance"
      },
      "NewTravelDiaryRequest" : {
        "required" : [ "activityEndDate", "activityLocation", "activityPurpose", "activityStartDate" ],
        "type" : "object",
        "properties" : {
          "activityStartDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityEndDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityLocation" : {
            "type" : "string",
            "description" : "Location of the travel diary "
          },
          "activityPurpose" : {
            "type" : "string",
            "description" : "Purpose of the travel "
          }
        },
        "description" : "TravelDiary body"
      },
      "NewTravelDiaryResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the traveldiary"
          }
        }
      },
      "RequestsPostResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the associated requests"
          }
        }
      },
      "AirTrip" : {
        "type" : "object",
        "properties" : {
          "airlineName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the airline vendor.",
            "example" : "Alaska Airlines"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The first travel date or the travel start date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The last travel date or the travel end date(ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "numberOfTravelDays" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The number of days of travel.",
            "format" : "int32"
          },
          "ticketType" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "The airline class of service.",
            "example" : "Economy"
          },
          "totalAmountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "comparisonFare" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "reasonCodes" : {
            "type" : "array",
            "description" : "The Reason Code defines the reason for booked fare against the comparison fare.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Air trip data associated with the expense. Please refer to the 'AirTrip' object for more information"
      },
      "Amount" : {
        "required" : [ "currencyCode", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "The amount in the defined currency"
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "The 3-letter ISO 4217 currency code for the expense report currency, based on the user's assigned reimbursement currency when the report was created. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona"
          }
        },
        "description" : "The amount comprises of value and currency."
      },
      "CarEReceipt" : {
        "type" : "object",
        "properties" : {
          "calculatedDailyRate" : {
            "type" : "number",
            "description" : "The calculated car rental daily rate"
          },
          "carClass" : {
            "maxLength" : 4,
            "type" : "string",
            "description" : "The car class.",
            "example" : "'IDAD', 'ECMZ', 'PCAV', 'IGDV'"
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "The 3-letter ISO 4217 currency code.",
            "example" : "'USD - US dollars', 'BRL - Brazilian real', 'CAD - Canadian dollar'"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The car rental end date(ISO-8601)(https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "fuelServiceCharge" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The fuel service charge."
          },
          "numberOfRentalDays" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of car rental calculated days.",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The car rental start date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "unitsDriven" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The total units driven.",
            "format" : "int32"
          },
          "vendorName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the car vendor.",
            "example" : "ABC Rent A Car"
          }
        },
        "description" : "The eReceipt car data. Please refer to the 'CarEReceipt' object for more information"
      },
      "CarTrip" : {
        "type" : "object",
        "properties" : {
          "calculatedDailyRate" : {
            "type" : "number",
            "description" : "The calculated car rental daily rate"
          },
          "carClass" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "The car class.",
            "example" : "'IDAD', 'ECMZ', 'PCAV', 'IGDV'"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The car rental end date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "numberOfCars" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The number of cars rented.",
            "format" : "int32"
          },
          "numberOfRentalDays" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of car rental calculated days.",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The car rental start date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "totalAmountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "vendorName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the car vendor.",
            "example" : "'ABC Rent A Car'"
          }
        },
        "description" : "Car trip data associated with the expense. Please refer to the 'CarTrip' object for more information"
      },
      "EReceipt" : {
        "required" : [ "id", "type" ],
        "type" : "object",
        "properties" : {
          "carEReceipt" : {
            "$ref" : "#/components/schemas/CarEReceipt"
          },
          "hotelEReceipt" : {
            "$ref" : "#/components/schemas/HotelEReceipt"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the eReceipt with the expense"
          },
          "imageId" : {
            "type" : "string",
            "description" : "The unique identifier of the eReceipt image associated with the expense"
          },
          "templateURL" : {
            "maxLength" : 512,
            "type" : "string",
            "description" : "The URL of the eReceipt template."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of eReceipt associated with the expense.",
            "enum" : [ "'AIR", "CAR", "GASXX", "GENERAL", "GRTRN", "HOTEL", "JPT", "MEALS", "OFFIC", "PRKNG", "RAIL", "RIDE", "SHIPG", "TELEC", "CFDI" ]
          }
        },
        "description" : "EReceipt information for the expense. Please refer to the 'EReceipt' object for more information"
      },
      "ExchangeRate" : {
        "required" : [ "operation", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "Exchange rate value"
          },
          "operation" : {
            "type" : "string",
            "description" : "Exchange rate operation.",
            "enum" : [ "MULTIPLY", "DIVIDE" ]
          }
        },
        "description" : "Exchange rate data for the expense. Please refer to the 'ExchangeRate' object for more information"
      },
      "ExpenseAttendee" : {
        "required" : [ "attendeeId" ],
        "type" : "object",
        "properties" : {
          "attendeeId" : {
            "type" : "string",
            "description" : "The unique identifier of the associated expense attendee within Concur"
          },
          "customData" : {
            "type" : "array",
            "description" : "The set of data the custom fields contain for the attendee based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "isAmountUserEdited" : {
            "type" : "boolean",
            "description" : "This field indicates if the amount value for the attendee on this expense was ever manually edited by the end user. Default value: false"
          },
          "isTraveling" : {
            "type" : "boolean",
            "description" : "Whether the attendee was traveling when the expense was incurred, used for FBT tax calculations"
          },
          "associatedAttendeeCount" : {
            "type" : "integer",
            "description" : "The count of total attendees. A count greater than 1 means there are unnamed attendees associated with this expense-attendee record. Default value: 1",
            "format" : "int32"
          },
          "versionNumber" : {
            "type" : "integer",
            "description" : "The version number of the attendee. This field value may always be 1, depending on the configuration. Default value: 1",
            "format" : "int32"
          },
          "transactionAmount" : {
            "type" : "number",
            "description" : "The portion of the expense transaction amount assigned to this attendee for both individual expense tracking and attendee totals across time periods"
          }
        }
      },
      "ExpenseAttendees" : {
        "type" : "object",
        "properties" : {
          "noShowAttendeeCount" : {
            "type" : "integer",
            "description" : "The number of attendees that were planned but did not show up",
            "format" : "int32",
            "default" : 0
          },
          "expenseAttendeeList" : {
            "maxItems" : 500,
            "type" : "array",
            "description" : "The list of attendees associated with the expense.",
            "items" : {
              "$ref" : "#/components/schemas/ExpenseAttendee"
            }
          }
        },
        "description" : "The attendee details associated with the smart expense. Please refer to the 'ExpenseAttendees' object for more information"
      },
      "ExpenseTax" : {
        "required" : [ "taxAuthorityId" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "reclaimCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax reclaim code."
          },
          "reclaimTransactionAmount" : {
            "type" : "number",
            "description" : "The tax reclaim transaction amount"
          },
          "taxAuthorityId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax authority"
          },
          "taxAuthorityName" : {
            "type" : "string",
            "description" : "The name of the tax authority"
          },
          "taxCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax code."
          },
          "taxLabel" : {
            "type" : "string",
            "description" : "The localized label of the tax authority"
          },
          "taxFormId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax form associated with the expense"
          },
          "taxRateTypeId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax rate type id"
          },
          "taxRateTypeName" : {
            "type" : "string",
            "description" : "The name of the tax rate type"
          },
          "taxReclaimConfigurationId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax reclaim configuration id"
          },
          "taxTransactionAmount" : {
            "type" : "number",
            "description" : "The tax transaction amount"
          }
        },
        "description" : "The tax data for the expense. Please refer to the 'ExpenseTax' object for more information"
      },
      "ExpenseType" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 5,
            "type" : "string",
            "description" : "The unique identifier of the expense type. Maximum length: 5 characters. Example: 'BRKFT'"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the expense type (localized as per accept-language header)"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the expense type"
          },
          "isDeleted" : {
            "type" : "boolean",
            "description" : "Whether the expense type returned is deleted or not"
          },
          "listItemId" : {
            "type" : "string",
            "description" : "The unique identifier of the list item for this expense type"
          }
        },
        "description" : "The expense type information for the expense. Please refer to the 'ExpenseType' object for more information"
      },
      "HotelEReceipt" : {
        "type" : "object",
        "properties" : {
          "calculatedDailyRate" : {
            "type" : "number",
            "description" : "The calculated hotel daily rate"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The hotel checkout date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "locationId" : {
            "type" : "string",
            "description" : "The unique identifier of the location for this hotel"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The hotel checkin date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "totalAmountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "vendorName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the hotel vendor.",
            "example" : "'Hilton', 'Four Points by Sheraton, Seattle'"
          }
        },
        "description" : "The eReceipt hotel data. Please refer to the 'HotelEReceipt' object for more information"
      },
      "HotelTrip" : {
        "type" : "object",
        "properties" : {
          "calculatedDailyRate" : {
            "type" : "number",
            "description" : "The calculated hotel daily rate"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The hotel checkout date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "numberOfNights" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The number of nights.",
            "format" : "int32"
          },
          "numberOfRooms" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The number of hotel rooms.",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The hotel checkin date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "totalAmountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "vendorName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the hotel vendor.",
            "example" : "'Hilton', 'Four Points by Sheraton, Seattle'"
          }
        },
        "description" : "Hotel trip data associated with the expense. Please refer to the 'HotelTrip' object for more information"
      },
      "Location" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the location. When location id is specified (when creating or updating a resource), other location object fields will be ignored"
          },
          "name" : {
            "type" : "string",
            "description" : "The location name (localized as per accept-language header)"
          },
          "city" : {
            "type" : "string",
            "description" : "The location city"
          },
          "countrySubDivisionCode" : {
            "type" : "string",
            "description" : "The location country sub division ISO 3166-2 code (https://en.wikipedia.org/wiki/ISO_3166-2)"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The location country ISO 3166-1 code (https://en.wikipedia.org/wiki/ISO_3166-1)"
          }
        },
        "description" : "The location information of the expense. Please refer to the 'Location' object for more information"
      },
      "Mileage" : {
        "required" : [ "totalDistance", "vehicleId" ],
        "type" : "object",
        "properties" : {
          "odometerStart" : {
            "type" : "integer",
            "description" : "The odometer reading at the start of the journey",
            "format" : "int32"
          },
          "odometerEnd" : {
            "type" : "integer",
            "description" : "The odometer reading at the end of the journey",
            "format" : "int32"
          },
          "passengerCount" : {
            "type" : "integer",
            "description" : "The number of passengers in the vehicle during the journey",
            "format" : "int32"
          },
          "personalDistance" : {
            "type" : "integer",
            "description" : "The portion of the journey attributed to personal use.",
            "format" : "int32",
            "default" : 0
          },
          "routeId" : {
            "type" : "string",
            "description" : "The unique identifier of the route for this journey"
          },
          "totalDistance" : {
            "type" : "integer",
            "description" : "The total distance for this journey",
            "format" : "int32"
          },
          "vehicleId" : {
            "type" : "string",
            "description" : "The unique identifier for the vehicle used for this journey"
          },
          "hasMobileCanteenOrHeavyLoadAttached" : {
            "type" : "boolean",
            "description" : "Whether the mileage expense has mobile canteen or is transporting a heavy load attached to the car.",
            "default" : false
          },
          "hasCaravanAttached" : {
            "type" : "boolean",
            "description" : "Whether the mileage expense has caravan attached to the car",
            "default" : false
          },
          "hasDogIncluded" : {
            "type" : "boolean",
            "description" : "Whether the mileage expense includes a dog for work purposes.",
            "default" : false
          },
          "hasForestOrConstructionSiteRoadInRoute" : {
            "type" : "boolean",
            "description" : "Whether the mileage route is via a forest road or construction site road.",
            "default" : false
          },
          "hasForestRoadInRoute" : {
            "type" : "boolean",
            "description" : "Whether the mileage route has forest road.",
            "default" : false
          },
          "isMarkedAsHigherRate" : {
            "type" : "boolean",
            "description" : "Whether a higher rate should be applied to the mileage expense.",
            "default" : false
          },
          "hasMachinery" : {
            "type" : "boolean",
            "description" : "Whether machines or equipment are transported in the car for this mileage expenses.",
            "default" : false
          },
          "hasTrailerAttached" : {
            "type" : "boolean",
            "description" : "Whether the mileage expense has trailer attached to the car.",
            "default" : false
          }
        },
        "description" : "The mileage data associated with the expense. Please refer to the 'Mileage' object for more information"
      },
      "NewReportExpense" : {
        "required" : [ "exchangeRate", "expenseSource", "expenseType", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "authorizationRequestExpenseId" : {
            "type" : "string",
            "description" : "The authorization request expense id associated with the expense"
          },
          "businessPurpose" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The text input for the business purpose by the user."
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "A comment that describes the expense."
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseSource" : {
            "type" : "string",
            "description" : "The source of the expense. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TA - Travel Allowance, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TA", "TR", "UI" ]
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "isExpenseBillable" : {
            "type" : "boolean",
            "description" : "Whether the expense is billable.",
            "default" : false
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user.",
            "default" : false
          },
          "isExcludedFromCashAdvanceByUser" : {
            "type" : "boolean",
            "description" : "Whether the user has excluded the expense from cash advance.",
            "default" : false
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "merchantTaxId" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The merchant tax id for the expense."
          },
          "mileage" : {
            "$ref" : "#/components/schemas/Mileage"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "The expense Id of the parent expense"
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "receiptType" : {
            "$ref" : "#/components/schemas/ReceiptType"
          },
          "smartExpense" : {
            "$ref" : "#/components/schemas/SmartExpense"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxRateLocation" : {
            "type" : "string",
            "description" : "Transaction location relative to the employee's home location as defined by their user profile. Possible values: FOREIGN - The expense transaction took place in foreign currency, HOME - The expense transaction took place in the reimbursement currency, OUT_OF_PROVINCE - The expense transaction took place outside the state jurisdiction.",
            "enum" : [ "FOREIGN", "HOME", "OUT_OF_PROVINCE" ],
            "default" : "HOME"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "travel" : {
            "$ref" : "#/components/schemas/Travel"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "budgetAccrualDate" : {
            "type" : "string",
            "description" : "The budget accrual date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601)Format: YYYY-MM-DD",
            "format" : "date"
          }
        },
        "description" : "Expense data"
      },
      "PaymentType" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the Payment type. Maximum length: 4 characters. Example: 'CASH'"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the payment type (localized as per accept-language header)"
          },
          "code" : {
            "type" : "string",
            "description" : "The code of the payment type"
          }
        },
        "description" : "The payment type information for the expense. Please refer to the 'PaymentType' object for more information"
      },
      "ReceiptType" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the receipt type.",
            "enum" : [ "N - No Receipt", "R - Regular Receipt", "T - Tax Receipt" ],
            "default" : "N"
          },
          "status" : {
            "type" : "string",
            "description" : "Receipt status (localized as per accept-language header)"
          }
        },
        "description" : "Receipt type for the expense. Please refer to the 'ReceiptType' object for more information"
      },
      "RideTrip" : {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "description" : "The start date for the ride (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD .",
            "format" : "date"
          },
          "totalAmountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "vendorName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The name of the vendor.",
            "example" : "Yellow Cab"
          }
        },
        "description" : "Ride or Taxi trip data associated with the expense. Please refer to the 'RideTrip' object for more information"
      },
      "SmartExpense" : {
        "type" : "object",
        "properties" : {
          "creditCardTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the credit card transaction (indexed transactionId) associated with the expense"
          },
          "ereceipt" : {
            "$ref" : "#/components/schemas/EReceipt"
          },
          "isAutoCreated" : {
            "type" : "boolean",
            "description" : "Whether this expense is auto created. This element only applies to POST expense request.",
            "default" : false
          },
          "quickExpenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the mobile expense associated with the expense. When 'quickExpenseId' is specified, 'exchangeRate.value' field value will be ignored and it's value will be read from exchange rate currency service but 'exchangeRate.operation' will still be honored"
          },
          "personalCardTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the personal card transaction associated with the expense"
          },
          "expenseAttendees" : {
            "$ref" : "#/components/schemas/ExpenseAttendees"
          },
          "trip" : {
            "$ref" : "#/components/schemas/Trip"
          }
        },
        "description" : "The smart expense data associated with this expense. Please refer to the 'SmartExpense' object for more information"
      },
      "Tax" : {
        "required" : [ "expenseTax1" ],
        "type" : "object",
        "properties" : {
          "expenseTax1" : {
            "$ref" : "#/components/schemas/ExpenseTax"
          },
          "expenseTax2" : {
            "$ref" : "#/components/schemas/ExpenseTax"
          }
        },
        "description" : "The tax data associated with the expense"
      },
      "Travel" : {
        "type" : "object",
        "properties" : {
          "airlineFeeTypeCode" : {
            "type" : "string",
            "description" : "Airline fee type code.",
            "enum" : [ "BAGGS", "BUSIN", "OBENT", "ONBRD", "OTHER", "PRACC", "SEATS", "TKCHG", "UPGRD" ]
          },
          "airlineFeeTypeName" : {
            "type" : "string",
            "description" : "The localized airline fee type name"
          },
          "airlineServiceClassCode" : {
            "type" : "string",
            "description" : "The airline service class code.",
            "enum" : [ "BUSIN", "COACH", "FIRST" ]
          },
          "airlineServiceClassName" : {
            "type" : "string",
            "description" : "The localized airline service class name"
          },
          "carRentalDays" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of days car was rented.",
            "format" : "int32"
          },
          "endLocation" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Location where the travel ended."
          },
          "hotelCheckinDate" : {
            "type" : "string",
            "description" : "The hotel checkin date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "hotelCheckoutDate" : {
            "type" : "string",
            "description" : "The hotel checkout date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "startLocation" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Location where the travel started."
          },
          "ticketNumber" : {
            "maxLength" : 32,
            "type" : "string",
            "description" : "The ticket number associated with the travel."
          }
        },
        "description" : "The travel data associated with the expense. Please refer to the 'Travel' object for more information"
      },
      "TravelAllowance" : {
        "type" : "object",
        "properties" : {
          "dailyLimitAmount" : {
            "type" : "number",
            "description" : "The allowed amount based on government travel allowance rates"
          },
          "dailyTravelAllowanceId" : {
            "maxLength" : 32,
            "type" : "string",
            "description" : "The fixed daily travel allowance id associated with the expense. "
          },
          "isExpensePartOfTravelAllowance" : {
            "type" : "boolean",
            "description" : "Whether the expense is part of travel allowance.",
            "default" : false
          }
        },
        "description" : "The travel allowance data associated with the expense. Please refer to the 'TravelAllowance' object for more information"
      },
      "Trip" : {
        "required" : [ "segmentId", "segmentTypeId", "tripId" ],
        "type" : "object",
        "properties" : {
          "airTrip" : {
            "$ref" : "#/components/schemas/AirTrip"
          },
          "bookingOrigin" : {
            "type" : "string",
            "description" : "Booking origin of the trip.",
            "enum" : [ "AETM - Amadeus E-Travel", "CLIQ - Concur Travel", "PANM - Open Booking", "TRPT - TripIt", "TSUP - Travel Supplier" ]
          },
          "bookingSource" : {
            "maxLength" : 48,
            "type" : "string",
            "description" : "Booking source of the trip. ",
            "example" : "'Expedia', 'Travelocity', 'Manual'"
          },
          "carTrip" : {
            "$ref" : "#/components/schemas/CarTrip"
          },
          "cliqbookPaymentId" : {
            "type" : "integer",
            "description" : "Cliqbook payment id associated with the trip",
            "format" : "int32"
          },
          "cliqbookPaymentMethod" : {
            "type" : "string",
            "description" : "Cliqbook payment method associated with the trip.",
            "enum" : [ "GHOST_CARD", "FLGHT_PASS" ]
          },
          "hotelTrip" : {
            "$ref" : "#/components/schemas/HotelTrip"
          },
          "merchantCode" : {
            "maxLength" : 4,
            "type" : "string",
            "description" : "Merchant code associated with the trip."
          },
          "rideTrip" : {
            "$ref" : "#/components/schemas/RideTrip"
          },
          "segmentId" : {
            "type" : "integer",
            "description" : "The unique identifier of the segment associated with the expense",
            "format" : "int64"
          },
          "segmentTypeId" : {
            "type" : "string",
            "description" : "Segment type id associated with the trip.",
            "enum" : [ "AIRFR - Air Ticket", "AIRSU - Air Subscription", "CARRT - Car Rental", "DININ - Dining", "EVENT - Event", "HOTEL - Hotel Reservation", "INSUR - Insurance", "LIMOF - Limousine Reservation", "MISC - Miscellaneous", "PARKG - Parking Fee", "RAILF - Train Ticket", "RAISU - Train Subscription", "TAXIF - Taxi Fare", "VISA - Visa" ]
          },
          "startLocationId" : {
            "type" : "string",
            "description" : "The unique identifier of the start location associated with the trip"
          },
          "tripId" : {
            "type" : "integer",
            "description" : "The unique identifier of the trip id associated with the expense",
            "format" : "int64"
          }
        },
        "description" : "Trip data associated with the expense. Please refer to the 'Trip' object for more information"
      },
      "Vendor" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the vendor"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the vendor (localized as per accept-language header)"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the vendor. Maximum length: 64 characters"
          }
        },
        "description" : "The vendor information for the expense. Please refer to the 'Vendor' object for more information"
      },
      "PostReportExpenseResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the report expense"
          }
        }
      },
      "ExpenseAttendeeResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the Expense Attendee association"
          }
        }
      },
      "NewAllocation" : {
        "required" : [ "percentage" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "isPercentEdited" : {
            "type" : "boolean",
            "description" : "Indicates whether the allocation percent has been edited",
            "default" : false
          },
          "percentage" : {
            "type" : "number",
            "description" : "The percentage of the total expense that this allocation represents"
          }
        }
      },
      "AllocationsPostResponse" : {
        "required" : [ "hasExpenseExceptions", "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Unique resource identifier of allocations for the expense"
          },
          "hasExpenseExceptions" : {
            "type" : "boolean",
            "description" : "Indicates whether the allocated expense has any exceptions",
            "default" : false
          }
        }
      },
      "CopyReport" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "firstExpenseTransactionDate" : {
            "type" : "string",
            "description" : "Starting Date (ISO-8601) of Expense on New Report (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD.\n If you provide a date, the earliest expense on the new report will be given that date and dates for all other expenses will be adjusted based on that. Otherwise, each expense will be given the original expense date plus one day.",
            "format" : "date"
          },
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ]
          }
        },
        "description" : "Copy report body"
      },
      "CopyReportResponse" : {
        "required" : [ "offsetDays", "originalReportId", "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the report"
          },
          "offsetDays" : {
            "type" : "integer",
            "description" : "The number of days by which the newly created report startDate & endDate was incremented",
            "format" : "int32"
          },
          "originalReportId" : {
            "type" : "string",
            "description" : "The reportId of the original report from which this report was copied"
          }
        }
      },
      "CashAdvancePostResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the associated cash advances"
          }
        }
      },
      "NewReportAllocation" : {
        "required" : [ "percentage" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "allocationId" : {
            "type" : "string",
            "description" : "The unique identifier of the allocation"
          },
          "isPercentEdited" : {
            "type" : "boolean",
            "description" : "Whether the allocation percent has been edited"
          },
          "percentage" : {
            "type" : "number",
            "description" : "The percentage of the total expense that this allocation represents"
          }
        }
      },
      "ReportAllocations" : {
        "required" : [ "expenseIds" ],
        "type" : "object",
        "properties" : {
          "allocations" : {
            "maxItems" : 500,
            "type" : "array",
            "description" : "This is an array of allocation objects to be created or updated.",
            "items" : {
              "$ref" : "#/components/schemas/NewReportAllocation"
            }
          },
          "expenseIds" : {
            "type" : "array",
            "description" : "This is an array of unique identifiers of expenses within this report that are being allocated",
            "items" : {
              "type" : "string",
              "description" : "This is an array of unique identifiers of expenses within this report that are being allocated"
            }
          }
        },
        "description" : "Allocations Data"
      },
      "ReportAllocationPostResponse" : {
        "required" : [ "isSystemAllocation", "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Unique resource identifier of allocation for an expense for this report"
          },
          "isSystemAllocation" : {
            "type" : "boolean",
            "description" : "Whether the allocation is a system allocation, usually hidden from the user. If displayed to the user, should be read-only"
          }
        }
      },
      "ReportAllocationsPostResponse" : {
        "required" : [ "allocations", "expenseId" ],
        "type" : "object",
        "properties" : {
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense"
          },
          "allocations" : {
            "type" : "array",
            "description" : "This is an array of allocations for an expense for this report",
            "items" : {
              "$ref" : "#/components/schemas/ReportAllocationPostResponse"
            }
          }
        }
      },
      "AllocationFavorite" : {
        "required" : [ "allocations", "formId", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "User-defined name of the Allocation Favorite"
          },
          "formId" : {
            "type" : "string",
            "description" : "Allocation `formId` of the Allocation Favorite"
          },
          "allocations" : {
            "type" : "array",
            "description" : "List of allocations which comprises the Allocation Favorite",
            "items" : {
              "$ref" : "#/components/schemas/AllocationFavoriteEntry"
            }
          }
        },
        "description" : "Allocation Favorite"
      },
      "AllocationFavoriteEntry" : {
        "required" : [ "percentage" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "percentage" : {
            "type" : "number",
            "description" : "Percentage of the total expense that the allocation represents"
          }
        },
        "description" : "An Allocation Entry which comprises a percentage of the Allocation Favorite"
      },
      "AllocationFavoritePostResponse" : {
        "required" : [ "id", "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "URI of the Allocation Favorite"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique ID of the Allocation Favorite"
          }
        }
      },
      "OneInboxTaskActionRequest" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The code of the associated response definition",
            "enum" : [ "APPROVE", "SENDBACK" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "A comment entered by the user when responding (null implies no comment)"
          },
          "reasonCode" : {
            "type" : "string",
            "description" : "The code of the associated reason definition (null implies no reason)"
          }
        }
      },
      "OneInboxError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Technical code of the error to be used for support purposes."
          },
          "details" : {
            "type" : "array",
            "description" : "Nested errors required for error processing",
            "items" : {
              "$ref" : "#/components/schemas/OneInboxErrorDetail"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "User-facing (localizable) message, describing the error. Errors SHOULD be presented honoring the Accept-Language HTTP header"
          },
          "target" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "Resource affected by the error (null if no specific resource)"
          }
        }
      },
      "OneInboxErrorDetail" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Technical code of the error to be used for support purposes"
          },
          "message" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "User-facing (localizable) message, describing the error. Errors SHOULD be presented honoring the Accept-Language HTTP header"
          }
        },
        "description" : "Nested errors required for error processing"
      },
      "ClearingDetail" : {
        "required" : [ "clearingAmount", "clearingDate", "clearingReference", "paymentReceiver" ],
        "type" : "object",
        "properties" : {
          "clearingAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "clearingDate" : {
            "type" : "string",
            "description" : "The clearing date (ISO-8601) of the payment made for this expense report (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "clearingReference" : {
            "$ref" : "#/components/schemas/ClearingReference"
          },
          "paymentReceiver" : {
            "$ref" : "#/components/schemas/PaymentReceiver"
          }
        },
        "description" : "The detailed information related to the payments made for this expense report"
      },
      "ClearingReference" : {
        "required" : [ "paymentMethod", "paymentReference" ],
        "type" : "object",
        "properties" : {
          "paymentMethod" : {
            "type" : "string",
            "description" : "The financial instrument used for making payment on the expense report. ",
            "enum" : [ "C", "E", "C - 'Check'", "E - 'EFT (Electronic funds transfer)" ]
          },
          "paymentReference" : {
            "maxLength" : 32,
            "type" : "string",
            "description" : "The unique identifier that confirms the payment transaction."
          }
        },
        "description" : "The clearing reference details of the payment for this expense report"
      },
      "PaymentConfirmationRequest" : {
        "required" : [ "clearingDetails", "processingStatusCode" ],
        "type" : "object",
        "properties" : {
          "clearingDetails" : {
            "type" : "array",
            "description" : "The detailed information related to the payments made for this expense report",
            "items" : {
              "$ref" : "#/components/schemas/ClearingDetail"
            }
          },
          "jobReferenceId" : {
            "type" : "string",
            "description" : "The job reference identifier associated with the payment made for this expense report"
          },
          "processingStatusCode" : {
            "type" : "string",
            "description" : "The status code that determines whether the expense report can be advanced to the payment confirmed workflow step upon full payment of expenses.",
            "enum" : [ "CP", "PP", "CP - 'Complete Payment'", "PP - 'Partial Payment'" ]
          }
        },
        "description" : "Report Payment Confirmation Data"
      },
      "PaymentReceiver" : {
        "required" : [ "receiverName" ],
        "type" : "object",
        "properties" : {
          "receiverName" : {
            "maxLength" : 66,
            "type" : "string",
            "description" : "The detailed name or description that identifies the receiver of this payment."
          },
          "receiverType" : {
            "type" : "string",
            "description" : "The classification type of the receiver of this payment.",
            "enum" : [ "EMPLOYEE", "EMPLOYEE - 'Receiver type is the report owner'", "'NULL' - For all payments that are not directly reimbursing the employee" ]
          }
        },
        "description" : "The receiver details to whom this payment was made"
      },
      "RedirectFund" : {
        "required" : [ "amount", "creditCardId" ],
        "type" : "object",
        "properties" : {
          "creditCardId" : {
            "type" : "string",
            "description" : "The unique identifier of the IBCP card account to which funds need to be redirected"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        },
        "description" : "Payment redirected to card at user's request"
      },
      "UpdateReport" : {
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "comment" : {
            "type" : "string",
            "description" : "The expense report comment added by the user"
          },
          "country" : {
            "type" : "string",
            "description" : "The country name associated with the report (localized as per accept-language header)",
            "readOnly" : true
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The location country ISO 3166-1 code (https://en.wikipedia.org/wiki/ISO_3166-1)"
          },
          "countrySubDivisionCode" : {
            "type" : "string",
            "description" : "The location country sub division ISO 3166-2 code (https://en.wikipedia.org/wiki/ISO_3166-2)"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "isCopyDownInherited" : {
            "type" : "boolean",
            "description" : "If this flag is set to true, any change in the report header fields will be copied down to expenses, itemizations and allocations, as per the configuration. Usage of this flag should be deliberate as data corruption could result."
          },
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "policy" : {
            "type" : "string",
            "description" : "The policy name to which the report adheres to",
            "readOnly" : true
          },
          "policyId" : {
            "type" : "string",
            "description" : "The unique identifier of the policy that applies to this report"
          },
          "redirectFund" : {
            "$ref" : "#/components/schemas/RedirectFund"
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "hasReceivedCashAdvanceReturns" : {
            "type" : "boolean",
            "description" : "Whether the Processor has received funds from the user for a cash advance return"
          },
          "isPaperReceiptsReceived" : {
            "type" : "boolean",
            "description" : "Whether paper receipts have been received for the report"
          },
          "receiptContainerId" : {
            "type" : "string",
            "description" : "The unique identifier of the physical location where the paper receipts are stored"
          }
        },
        "description" : "Report body"
      },
      "UpdateWorkflowStepApprover" : {
        "type" : "object",
        "properties" : {
          "approverId" : {
            "type" : "string",
            "description" : "Approver employee identifier"
          }
        },
        "description" : "Updates Approver for Workflow Step"
      },
      "UpdateTravelDiaryRequest" : {
        "type" : "object",
        "properties" : {
          "activityStartDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityEndDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityLocation" : {
            "type" : "string",
            "description" : "Location of the travel diary "
          },
          "activityPurpose" : {
            "type" : "string",
            "description" : "Purpose of the travel "
          }
        },
        "description" : "TravelDiary body"
      },
      "SubmitReportRequest" : {
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ]
          }
        }
      },
      "SendBackReport" : {
        "required" : [ "comment" ],
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ],
            "default" : "OTHER"
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This is the approver's remark on the sendback action"
          }
        },
        "description" : "Report body"
      },
      "RecallReport" : {
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ],
            "default" : "OTHER"
          }
        }
      },
      "UpdateReportExpense" : {
        "required" : [ "expenseSource" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "authorizationRequestExpenseId" : {
            "type" : "string",
            "description" : "The authorization request expense id associated with the expense"
          },
          "businessPurpose" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The text input for the business purpose by the user."
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "A comment that describes the expense."
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseSource" : {
            "type" : "string",
            "description" : "The source of the expense. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TA - Travel Allowance, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TA", "TR", "UI" ]
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "isExpenseBillable" : {
            "type" : "boolean",
            "description" : "Whether the expense is billable"
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user"
          },
          "isExcludedFromCashAdvanceByUser" : {
            "type" : "boolean",
            "description" : "Whether the user has excluded the expense from cash advance"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "merchantTaxId" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The merchant tax id for the expense."
          },
          "mileage" : {
            "$ref" : "#/components/schemas/Mileage"
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "receiptType" : {
            "$ref" : "#/components/schemas/ReceiptType"
          },
          "smartExpense" : {
            "$ref" : "#/components/schemas/SmartExpense"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxRateLocation" : {
            "type" : "string",
            "description" : "Transaction location relative to the employee's home location as defined by their user profile. Possible values: FOREIGN - The expense transaction took place in foreign currency, HOME - The expense transaction took place in the reimbursement currency, OUT_OF_PROVINCE - The expense transaction took place outside the state jurisdiction",
            "enum" : [ "FOREIGN", "HOME", "OUT_OF_PROVINCE" ]
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "travel" : {
            "$ref" : "#/components/schemas/Travel"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "budgetAccrualDate" : {
            "type" : "string",
            "description" : "The budget accrual date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601)Format: YYYY-MM-DD",
            "format" : "date"
          },
          "approverAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "hasMissingReceiptDeclaration" : {
            "type" : "boolean",
            "description" : "Whether the expense has an affidavit declaration for missing receipt"
          },
          "isCopyDownInherited" : {
            "type" : "boolean",
            "description" : "If this flag is set to true, any change in the report expense fields will be copied down to itemization's and allocations, as per the configuration"
          },
          "isExpenseRejected" : {
            "type" : "boolean",
            "description" : "Whether the approver or processor has rejected this expense in the report. If this is true then this expense will be sent back to the report submitted in an addendum (split) report"
          },
          "isPaperReceiptReceived" : {
            "type" : "boolean",
            "description" : "Whether paper receipts have been received for the expense"
          }
        },
        "description" : "Expense data"
      },
      "MoveExpense" : {
        "required" : [ "targetReportId" ],
        "type" : "object",
        "properties" : {
          "targetReportId" : {
            "type" : "string",
            "description" : "ReportId of the destination report"
          }
        },
        "description" : "Contains the unique identifier of the destination report"
      },
      "MoveExpenseResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the expense after successful move operation"
          }
        }
      },
      "AssociateImageToExpense" : {
        "required" : [ "receiptImageId" ],
        "type" : "object",
        "properties" : {
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image that needs to be associated to the expense"
          },
          "isImageAppend" : {
            "type" : "boolean",
            "description" : "Whether the image should be appended to the existing image that is already on the expense, if there is one"
          }
        },
        "description" : "Expense data"
      },
      "UpdateAllocation" : {
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          }
        },
        "description" : "Allocation data"
      },
      "BulkUpdateReportExpense" : {
        "required" : [ "expenseSource" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "authorizationRequestExpenseId" : {
            "type" : "string",
            "description" : "The authorization request expense id associated with the expense"
          },
          "businessPurpose" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The text input for the business purpose by the user."
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "A comment that describes the expense."
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseSource" : {
            "type" : "string",
            "description" : "The source of the expense. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TA - Travel Allowance, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TA", "TR", "UI" ]
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "isExpenseBillable" : {
            "type" : "boolean",
            "description" : "Whether the expense is billable"
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user"
          },
          "isExcludedFromCashAdvanceByUser" : {
            "type" : "boolean",
            "description" : "Whether the user has excluded the expense from cash advance"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "merchantTaxId" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The merchant tax id for the expense."
          },
          "mileage" : {
            "$ref" : "#/components/schemas/Mileage"
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "receiptType" : {
            "$ref" : "#/components/schemas/ReceiptType"
          },
          "smartExpense" : {
            "$ref" : "#/components/schemas/SmartExpense"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxRateLocation" : {
            "type" : "string",
            "description" : "Transaction location relative to the employee's home location as defined by their user profile. Possible values: FOREIGN - The expense transaction took place in foreign currency, HOME - The expense transaction took place in the reimbursement currency, OUT_OF_PROVINCE - The expense transaction took place outside the state jurisdiction",
            "enum" : [ "FOREIGN", "HOME", "OUT_OF_PROVINCE" ]
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "travel" : {
            "$ref" : "#/components/schemas/Travel"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "budgetAccrualDate" : {
            "type" : "string",
            "description" : "The budget accrual date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601)Format: YYYY-MM-DD",
            "format" : "date"
          },
          "approverAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "hasMissingReceiptDeclaration" : {
            "type" : "boolean",
            "description" : "Whether the expense has an affidavit declaration for missing receipt"
          },
          "isCopyDownInherited" : {
            "type" : "boolean",
            "description" : "If this flag is set to true, any change in the report expense fields will be copied down to itemization's and allocations, as per the configuration"
          },
          "isExpenseRejected" : {
            "type" : "boolean",
            "description" : "Whether the approver or processor has rejected this expense in the report. If this is true then this expense will be sent back to the report submitted in an addendum (split) report"
          },
          "isPaperReceiptReceived" : {
            "type" : "boolean",
            "description" : "Whether paper receipts have been received for the expense"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense"
          }
        }
      },
      "CombineExpensesResponse" : {
        "required" : [ "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Uri of the remaining expense after the combine operation"
          }
        }
      },
      "AssociateImage" : {
        "required" : [ "receiptImageId" ],
        "type" : "object",
        "properties" : {
          "receiptImageId" : {
            "type" : "string",
            "description" : "The Id of the image to associate to the report header"
          }
        }
      },
      "ApproveReport" : {
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ],
            "default" : "OTHER"
          },
          "statusId" : {
            "maxLength" : 6,
            "type" : "string",
            "description" : "Status that will be assigned to the report by this workflow transition.",
            "default" : "A_APPR"
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This is the approver's remark on the approval action"
          },
          "expenseRejectedComment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This comment identifies why some of the expenses are rejected on this report."
          }
        }
      },
      "UpdateReportAllocation" : {
        "required" : [ "allocation", "expenseIds" ],
        "type" : "object",
        "properties" : {
          "expenseIds" : {
            "type" : "array",
            "description" : "This is an array of unique identifiers of expenses within this report that are being updated",
            "items" : {
              "type" : "string"
            }
          },
          "allocation" : {
            "$ref" : "#/components/schemas/UpdateAllocation"
          }
        },
        "description" : "Allocation data"
      },
      "SendBackReportAsSystem" : {
        "required" : [ "comment" ],
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ],
            "default" : "OTHER"
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This is the approver's remark on the sendback action"
          },
          "expectedWorkflowStepInstanceId" : {
            "type" : "string",
            "description" : "The ID of the workflow step in which this report is expected to be in.This parameter can be used to verify that the report is still in the expected workflow step."
          }
        }
      },
      "ApproveReportAsSystem" : {
        "type" : "object",
        "properties" : {
          "reportSource" : {
            "type" : "string",
            "description" : "The source of the report. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TR", "UI" ],
            "default" : "OTHER"
          },
          "statusId" : {
            "maxLength" : 6,
            "type" : "string",
            "description" : "Status that will be assigned to the report by this workflow transition.",
            "default" : "A_APPR"
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This is the approver's remark on the approval action"
          },
          "expenseRejectedComment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "This comment identifies why some of the expenses are rejected on this report."
          },
          "expectedWorkflowStepInstanceId" : {
            "type" : "string",
            "description" : "The ID of the workflow step in which this report is expected to be in.This parameter can be used to verify that the report is still in the expected workflow step."
          }
        }
      },
      "CostObject" : {
        "required" : [ "approvedAmount", "approver", "claimedAmount", "costObjectExpenseIds", "hierarchyNodeId", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Cost Object"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approver" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "hierarchyNodeId" : {
            "type" : "string",
            "description" : "The unique identifier of the group hierarchy node for the report resource"
          },
          "isCostObjectOwnedByUser" : {
            "type" : "boolean",
            "description" : "Whether the Cost Object is the responsibility of the API caller. The cost object could be previously approved or pending approval by the API caller"
          },
          "costObjectExpenseIds" : {
            "type" : "array",
            "description" : "Assigned unique identifier for cost object",
            "items" : {
              "$ref" : "#/components/schemas/CostObjectExpenseId"
            }
          }
        },
        "description" : "CostObject"
      },
      "CostObjectExpenseId" : {
        "required" : [ "expenseId" ],
        "type" : "object",
        "properties" : {
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier for the expense"
          },
          "alloctionIds" : {
            "type" : "array",
            "description" : "The list of unique allocation identifiers for the expense",
            "items" : {
              "type" : "string",
              "description" : "The list of unique allocation identifiers for the expense"
            }
          }
        }
      },
      "Employee" : {
        "required" : [ "firstName", "lastName" ],
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "First name of the employee"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the employee"
          },
          "middleInitial" : {
            "type" : "string",
            "description" : "Middle initial of the employee"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "Unique identifier of the employee that can be referenced in external systems"
          },
          "employeeUuid" : {
            "type" : "string",
            "description" : "UUID of the employee",
            "format" : "uuid"
          }
        },
        "description" : "Names and Identifier of the report owner"
      },
      "CostObjectExpense" : {
        "required" : [ "approvedAmount", "id", "postedAmount" ],
        "type" : "object",
        "properties" : {
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the expense"
          }
        },
        "description" : "A list of expenses associated with the cost object"
      },
      "CostObjectForApprover" : {
        "required" : [ "approvedAmount", "approverId", "claimedAmount", "expenses", "isApprovableAsDelegate", "isApprovableAsUser", "isFullyApproved", "isOwnedByCaller", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the cost object"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approverId" : {
            "type" : "string",
            "description" : "The details of the approver who is pending to approve the cost object"
          },
          "expenses" : {
            "type" : "array",
            "description" : "A list of expenses associated with the cost object",
            "items" : {
              "$ref" : "#/components/schemas/CostObjectExpense"
            }
          },
          "isOwnedByCaller" : {
            "type" : "boolean",
            "description" : "Whether the caller is one of the cost object owners"
          },
          "isFullyApproved" : {
            "type" : "boolean",
            "description" : "Whether the cost object flow is completed"
          },
          "isApprovableAsUser" : {
            "type" : "boolean",
            "description" : "Whether the cost object is pending approval by the calling approver"
          },
          "isApprovableAsDelegate" : {
            "type" : "boolean",
            "description" : "Whether the cost object flow is pending approval by the calling delegate"
          }
        }
      },
      "Link" : {
        "required" : [ "href", "isTemplated", "method", "rel" ],
        "type" : "object",
        "properties" : {
          "rel" : {
            "type" : "string",
            "description" : "The link relationship that describes how the href relates to the API call"
          },
          "href" : {
            "type" : "string",
            "description" : "The URL of the related HATEOAS link that you can use for subsequent calls"
          },
          "hreflang" : {
            "type" : "string"
          },
          "media" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "deprecation" : {
            "type" : "string"
          },
          "profile" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "template" : {
            "$ref" : "#/components/schemas/UriTemplate"
          },
          "method" : {
            "type" : "string",
            "description" : "The HTTP method required for the related call"
          },
          "isTemplated" : {
            "type" : "boolean",
            "description" : "Whether the href is parameterized"
          }
        }
      },
      "RequestAssociatedReports" : {
        "required" : [ "reportId" ],
        "type" : "object",
        "properties" : {
          "reportId" : {
            "type" : "string",
            "description" : "The unique identifier for the report resource"
          },
          "links" : {
            "type" : "array",
            "description" : "Resource links related to this call",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        },
        "description" : "Associated Reports"
      },
      "TemplateVariable" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "SIMPLE", "PATH_VARIABLE", "RESERVED_STRING", "DOT", "REQUEST_PARAM", "REQUEST_PARAM_CONTINUED", "PATH_SEGMENT", "SEGMENT", "PATH_STYLE_PARAMETER", "FRAGMENT", "COMPOSITE_PARAM" ]
          },
          "description" : {
            "type" : "string"
          },
          "composite" : {
            "type" : "boolean"
          },
          "singular" : {
            "type" : "boolean"
          }
        }
      },
      "UriTemplate" : {
        "type" : "object",
        "properties" : {
          "variables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TemplateVariable"
            }
          },
          "variableNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BasePagingRequestParams" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "integer",
            "description" : "Page Number",
            "format" : "int32",
            "default" : 1
          },
          "size" : {
            "type" : "integer",
            "description" : "Page Size",
            "format" : "int32",
            "enum" : [ 25, 50, 100 ],
            "default" : 100
          }
        }
      },
      "PageMetadata" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int64"
          },
          "number" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PagedModelReportList" : {
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportList"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "ReportList" : {
        "required" : [ "approvalStatus", "approvedAmount", "canAddExpense", "claimedAmount", "hasBlockingExceptions", "hasExceptions", "isApproved", "isEnabledForFinancialIntegration", "isPaymentConfirmed", "isPendingApproval", "isPendingDelegatorReview", "isPendingProcessor", "isPendingProcessorReview", "isSentBack", "isSentForPayment", "isSubmitted", "link", "name", "paymentStatus", "reportId", "reportTotal" ],
        "type" : "object",
        "properties" : {
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "approvalStatus" : {
            "type" : "string",
            "description" : "The report’s approval status (localized as per accept-language header)"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "The report's payment status (localized as per accept-language header)"
          },
          "reportId" : {
            "type" : "string",
            "description" : "The unique identifier for the report resource"
          },
          "sentBackDate" : {
            "type" : "string",
            "description" : "The UTC datetime on which the report was sent back to the employee (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "submitDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the user submitted the report (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the report got paid (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The report start date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The report end date (ISO-8601) (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "isPendingProcessorReview" : {
            "type" : "boolean",
            "description" : "Whether the report is pending the processor's review"
          },
          "isSentForPayment" : {
            "type" : "boolean",
            "description" : "Whether the report is past the sent for payment workflow step"
          },
          "isPaymentConfirmed" : {
            "type" : "boolean",
            "description" : "Whether the report is past the payment confirmation workflow step"
          },
          "isSubmitted" : {
            "type" : "boolean",
            "description" : "Whether the report has been submitted by the employee"
          },
          "isSentBack" : {
            "type" : "boolean",
            "description" : "Whether the report is in sent back status"
          },
          "isPendingProcessor" : {
            "type" : "boolean",
            "description" : "Whether the report is pending the processor status"
          },
          "isApproved" : {
            "type" : "boolean",
            "description" : "Whether the report has been approved"
          },
          "isPendingApproval" : {
            "type" : "boolean",
            "description" : "Whether the report is pending any approval"
          },
          "isPendingDelegatorReview" : {
            "type" : "boolean",
            "description" : "Whether a report created by a delegate is pending review by the employee"
          },
          "isEnabledForFinancialIntegration" : {
            "type" : "boolean",
            "description" : "Whether a report is enabled for financial integration"
          },
          "isEnabledForReopen" : {
            "type" : "boolean",
            "description" : "Whether a report is enabled for reopen"
          },
          "isReopened" : {
            "type" : "boolean",
            "description" : "Whether the report is reopened"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the Report has any exceptions"
          },
          "hasBlockingExceptions" : {
            "type" : "boolean",
            "description" : "Whether the report has any exceptions that block it from being submitted"
          },
          "approver" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "reportNumber" : {
            "type" : "string",
            "description" : "User friendly unique identifier for the report"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "reportType" : {
            "type" : "string",
            "description" : "This value identifies the method used to create the report. Statement refers to company billed statement reports and Auto-created refers to reports created by Expense Assistant.",
            "example" : "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'",
            "enum" : [ "Regular", "Reconciliation", "Statement", "AutoCreated", "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'" ]
          },
          "cardProgramStatementPeriodId" : {
            "type" : "string",
            "description" : "The unique identifier of card program statement period on the report"
          },
          "canAddExpense" : {
            "type" : "boolean",
            "description" : "Indicates whether an expense entry can be added to Report"
          },
          "sponsorId" : {
            "type" : "string",
            "description" : "The unique identifier of the Employee, who is the official sponsor of the report owner"
          },
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "reportTotal" : {
            "$ref" : "#/components/schemas/Amount"
          }
        }
      },
      "ReportToApprove" : {
        "required" : [ "amountDueEmployee", "approver", "claimedAmount", "employee", "hasExceptions", "link", "name", "reportDate", "reportId", "reportNumber", "reportType", "submitDate", "totalApprovedAmount" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "reportId" : {
            "type" : "string",
            "description" : "The unique identifier for the report resource"
          },
          "reportNumber" : {
            "type" : "string",
            "description" : "The 6 character unique identifier for the report resource"
          },
          "submitDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) the report was submitted by the user (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "approver" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "employee" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "amountDueEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalApprovedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the Report has any exceptions"
          },
          "reportType" : {
            "type" : "string",
            "description" : "This value identifies the method used to create the report. Statement refers to company billed statement reports and Auto-created refers to reports created by Expense Assistant.",
            "example" : "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'",
            "enum" : [ "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'" ]
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "crnCode" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeMiddleInitial" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeFirstName" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeLastName" : {
            "type" : "string",
            "writeOnly" : true
          }
        },
        "description" : "ReportToApprove"
      },
      "ReportForm" : {
        "required" : [ "amountCompanyPaid", "amountDueCompany", "amountDueCompanyCard", "amountDueEmployee", "amountNotApproved", "analyticsGroupId", "approvalStatus", "approvalStatusId", "approvedAmount", "canAddExpense", "canRecall", "claimedAmount", "concurAuditStatus", "creationDate", "currency", "currencyCode", "defaultFieldAccess", "hierarchyNodeId", "imageStatus", "isFinancialIntegrationEnabled", "isPaperReceiptRequired", "isPaperReceiptsReceived", "isPendingDelegatorReview", "isReceiptImageAvailable", "isReceiptImageRequired", "isSentBack", "isSubmitted", "ledger", "ledgerId", "name", "paymentConfirmedAmount", "paymentStatus", "paymentStatusId", "personalAmount", "policy", "policyId", "receiptStatus", "reportFormId", "reportId", "reportTotal", "reportVersion", "userId" ],
        "type" : "object",
        "properties" : {
          "approvalStatus" : {
            "type" : "string",
            "description" : "The report’s approval status, in the user’s language"
          },
          "approvalStatusId" : {
            "type" : "string",
            "description" : "The unique identifier of the Approval Status"
          },
          "concurAuditStatus" : {
            "type" : "string",
            "description" : "The status of audit for the report",
            "enum" : [ "PASS", "FAIL", "NOTR" ]
          },
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the report based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "ledger" : {
            "type" : "string",
            "description" : "The ledger name to which the report belongs (localized as per accept-language header)"
          },
          "ledgerId" : {
            "type" : "string",
            "description" : "The unique identifier of the Ledger"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "The report's payment status in the user's language"
          },
          "paymentStatusId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment status of the report"
          },
          "submitDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the user submitted the report (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountCompanyPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "paymentConfirmedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountDueCompany" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountDueCompanyCard" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountDueEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "personalAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "reportTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountNotApproved" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "isFinancialIntegrationEnabled" : {
            "type" : "boolean",
            "description" : "Whether the Financial Integration setting has been enabled for this report"
          },
          "canReopen" : {
            "type" : "boolean",
            "description" : "Whether the report can be reopened after payment"
          },
          "isReopened" : {
            "type" : "boolean",
            "description" : "Whether the report is reopened"
          },
          "isFundsAndGrantsIntegrationEligible" : {
            "type" : "boolean",
            "description" : "Whether a report is eligible to be FGI obligated"
          },
          "isReceiptImageAvailable" : {
            "type" : "boolean",
            "description" : "Whether the receipt image is available at the report level"
          },
          "isReceiptImageRequired" : {
            "type" : "boolean",
            "description" : "Whether the receipt image is required at the report level"
          },
          "isPaperReceiptsReceived" : {
            "type" : "boolean",
            "description" : "Whether paper receipts have been received for the report"
          },
          "reportId" : {
            "type" : "string",
            "description" : "The unique identifier for the report resource"
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency name for the report (localized as per accept-language header)"
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "The 3-letter ISO 4217 currency code (https://en.wikipedia.org/wiki/ISO_4217) for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong"
          },
          "analyticsGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the business intelligence hierarchy node"
          },
          "hierarchyNodeId" : {
            "type" : "string",
            "description" : "The unique identifier of the group hierarchy node for the report resource"
          },
          "allocationFormId" : {
            "type" : "string",
            "description" : "The unique identifier of the allocation form"
          },
          "links" : {
            "type" : "array",
            "description" : "Resource links related to this call",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "reportFormId" : {
            "type" : "string",
            "description" : "The unique identifier of the report form"
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "countryCode" : {
            "maxLength" : 2,
            "type" : "string",
            "description" : "The report country. Format: The ISO 3166-1 alpha-2 country code.",
            "example" : "United States is US"
          },
          "countrySubDivisionCode" : {
            "type" : "string",
            "description" : "The location country sub division ISO 3166-2 code (https://en.wikipedia.org/wiki/ISO_3166-2)"
          },
          "policyId" : {
            "type" : "string",
            "description" : "The unique identifier of the policy that applies to this report"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "policy" : {
            "type" : "string",
            "description" : "The policy name to which the report adheres (localized as per accept-language header)"
          },
          "country" : {
            "type" : "string",
            "description" : "The country name associated with the report (localized as per accept-language header)"
          },
          "hasReceivedCashAdvanceReturns" : {
            "type" : "boolean",
            "description" : "Whether the Processor has received funds from the user for a cash advance return"
          },
          "receiptContainerId" : {
            "type" : "string",
            "description" : "The unique identifier of the physical location where the paper receipts are stored"
          },
          "userId" : {
            "type" : "string",
            "description" : "The unique identifier of the Concur user who is the report owner"
          },
          "reportType" : {
            "type" : "string",
            "description" : "This value identifies the method used to create the report. Statement refers to company billed statement reports and Auto-created refers to reports created by Expense Assistant.",
            "example" : "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'",
            "enum" : [ "Regular", "Reconciliation", "Statement", "AutoCreated", "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'" ]
          },
          "redirectFund" : {
            "$ref" : "#/components/schemas/RedirectFund"
          },
          "creationDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the user created the report (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "canRecall" : {
            "type" : "boolean",
            "description" : "Whether the report can be recalled by the current user"
          },
          "reportVersion" : {
            "type" : "integer",
            "description" : "The current version of the report",
            "format" : "int32"
          },
          "reportNumber" : {
            "type" : "string",
            "description" : "User friendly unique identifier for the report"
          },
          "cardProgramStatementPeriodId" : {
            "type" : "string",
            "description" : "The unique identifier of card program statement period on the report"
          },
          "canAddExpense" : {
            "type" : "boolean",
            "description" : "Indicates whether an expense entry can be added to the report"
          },
          "isSubmitted" : {
            "type" : "boolean",
            "description" : "Indicates whether the report has been submitted"
          },
          "isSentBack" : {
            "type" : "boolean",
            "description" : "Indicates whether the report has been sent back"
          },
          "sponsorId" : {
            "type" : "string",
            "description" : "The unique identifier of the Employee, who is the official sponsor of the report owner"
          },
          "submitterId" : {
            "type" : "string",
            "description" : "The unique identifier of the employee, who submitted the report"
          },
          "taxConfigId" : {
            "type" : "string",
            "description" : "The tax config ID of the report"
          },
          "defaultFieldAccess" : {
            "type" : "string",
            "description" : "The default access level of this reports form fields. RO = read-only, RW = read-write",
            "enum" : [ "HD", "RO", "RW" ]
          },
          "employee" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "receiptStatus" : {
            "type" : "string",
            "description" : "The paper receipts status for the report.",
            "enum" : [ "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED", "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED" ]
          },
          "imageStatus" : {
            "type" : "string",
            "description" : "The linked image status for the report.",
            "enum" : [ "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED", "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED" ]
          },
          "isPendingDelegatorReview" : {
            "type" : "boolean",
            "description" : "Whether a report created by a delegate is pending review by the employee"
          },
          "isPaperReceiptRequired" : {
            "type" : "boolean",
            "description" : "Whether a paper receipt is required for the report."
          }
        },
        "description" : "ReportDetails"
      },
      "EmployeeInfo" : {
        "required" : [ "employeeId", "firstName", "lastName", "loginId" ],
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "First name of the employee"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the employee"
          },
          "middleInitial" : {
            "type" : "string",
            "description" : "Middle initial of the employee"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "Employee id"
          },
          "employeeUuid" : {
            "type" : "string",
            "description" : "UUID of the employee",
            "format" : "uuid"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address"
          },
          "userId" : {
            "type" : "string",
            "description" : "User id"
          },
          "loginId" : {
            "type" : "string",
            "description" : "Login id"
          }
        },
        "description" : "EmployeeDetail"
      },
      "SubWorkflowInstance" : {
        "required" : [ "processId", "processInstanceId" ],
        "type" : "object",
        "properties" : {
          "processInstanceId" : {
            "type" : "string",
            "description" : "Workflow instance id"
          },
          "processId" : {
            "type" : "string",
            "description" : "Id of the workflow process that this workflow is an instance of"
          },
          "currentSequence" : {
            "type" : "integer",
            "description" : "Sequence of the current step in the workflow instance",
            "format" : "int32"
          },
          "userAddedStepId" : {
            "type" : "string",
            "description" : "The user added step identifier for the workflow"
          },
          "instanceType" : {
            "type" : "string",
            "description" : "Type of workflow instance",
            "enum" : [ "COST_OBJECT_WORKFLOW", "BUDGET_OBJECT_WORKFLOW" ]
          },
          "subWorkflowStepInstances" : {
            "type" : "array",
            "description" : "List of steps within the sub workflow instance",
            "items" : {
              "$ref" : "#/components/schemas/SubWorkflowStepInstance"
            }
          }
        }
      },
      "SubWorkflowStepInstance" : {
        "required" : [ "roleCode", "sequenceOrder", "stepId", "stepInstanceId", "stepInstanceName" ],
        "type" : "object",
        "properties" : {
          "stepInstanceId" : {
            "type" : "string",
            "description" : "Step instance identifier"
          },
          "stepInstanceName" : {
            "type" : "string",
            "description" : "Step instance name"
          },
          "sequenceOrder" : {
            "type" : "integer",
            "description" : "Sequence of this step in the workflow",
            "format" : "int32"
          },
          "stepId" : {
            "type" : "string",
            "description" : "Identifier of the step that this is an instance of"
          },
          "finalStatusId" : {
            "type" : "string",
            "description" : "Final status for this step"
          },
          "roleCode" : {
            "type" : "string",
            "description" : "Role Code"
          },
          "actionDate" : {
            "type" : "string",
            "description" : "The UTC datetime when this step was acted upon (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "isVisible" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be visible to the user"
          },
          "isCompleted" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step has been completed"
          },
          "isEditable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be edited by the user (relevant only if the step is visible)"
          },
          "isDeletable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be deleted by the user (relevant only if the step is visible)"
          },
          "isRequired" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is required (relevant only if the step is visible)"
          },
          "isUserAddedStepAllowed" : {
            "type" : "boolean",
            "description" : "Boolean indicating if a step can be added (relevant only if the step is visible)"
          },
          "isProcessorStep" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is a processor step"
          },
          "isStepSkippable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if step can be skipped, true if skip rules are defined for the step"
          },
          "hasStepBeenSkipped" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is skipped, true if any skip rule defined for this step evaluates to true"
          },
          "changedApprover" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          },
          "approver" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          },
          "delegate" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          }
        }
      },
      "WorkflowInstance" : {
        "required" : [ "processId", "processInstanceId" ],
        "type" : "object",
        "properties" : {
          "processInstanceId" : {
            "type" : "string",
            "description" : "Workflow instance id"
          },
          "processId" : {
            "type" : "string",
            "description" : "Id of the workflow process that this workflow is an instance of"
          },
          "currentSequence" : {
            "type" : "integer",
            "description" : "Sequence of the current step in the workflow instance",
            "format" : "int32"
          },
          "userAddedStepId" : {
            "type" : "string",
            "description" : "The user added step identifier for the workflow"
          },
          "isReadOnly" : {
            "type" : "boolean",
            "description" : "Indicates whether workflow instance is read only for the current user"
          },
          "userAddedProcessorStepId" : {
            "type" : "string",
            "description" : "The user added processor step identifier for the workflow"
          },
          "isUserAddedStepAfterProcessorAllowed" : {
            "type" : "boolean",
            "description" : "Indicates if user is allowed to add steps after processor step"
          },
          "exceptionMessage" : {
            "type" : "string",
            "description" : "Exception message, if any, associated with the workflow instance. For example when a workflow instance is reset"
          },
          "stepInstances" : {
            "type" : "array",
            "description" : "List of steps in the workflow instance",
            "items" : {
              "$ref" : "#/components/schemas/WorkflowStepInstance"
            }
          }
        }
      },
      "WorkflowStepInstance" : {
        "required" : [ "roleCode", "sequenceOrder", "stepId", "stepInstanceId", "stepInstanceName" ],
        "type" : "object",
        "properties" : {
          "stepInstanceId" : {
            "type" : "string",
            "description" : "Step instance identifier"
          },
          "stepInstanceName" : {
            "type" : "string",
            "description" : "Step instance name"
          },
          "sequenceOrder" : {
            "type" : "integer",
            "description" : "Sequence of this step in the workflow",
            "format" : "int32"
          },
          "stepId" : {
            "type" : "string",
            "description" : "Identifier of the step that this is an instance of"
          },
          "finalStatusId" : {
            "type" : "string",
            "description" : "Final status for this step"
          },
          "roleCode" : {
            "type" : "string",
            "description" : "Role Code"
          },
          "actionDate" : {
            "type" : "string",
            "description" : "The UTC datetime when this step was acted upon (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "isVisible" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be visible to the user"
          },
          "isCompleted" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step has been completed"
          },
          "isEditable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be edited by the user (relevant only if the step is visible)"
          },
          "isDeletable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step can be deleted by the user (relevant only if the step is visible)"
          },
          "isRequired" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is required (relevant only if the step is visible)"
          },
          "isUserAddedStepAllowed" : {
            "type" : "boolean",
            "description" : "Boolean indicating if a step can be added (relevant only if the step is visible)"
          },
          "isProcessorStep" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is a processor step"
          },
          "isStepSkippable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if step can be skipped, true if skip rules are defined for the step"
          },
          "hasStepBeenSkipped" : {
            "type" : "boolean",
            "description" : "Boolean indicating if the step is skipped, true if any skip rule defined for this step evaluates to true"
          },
          "changedApprover" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          },
          "approver" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          },
          "delegate" : {
            "$ref" : "#/components/schemas/EmployeeInfo"
          },
          "subWorkflowInstances" : {
            "type" : "array",
            "description" : "List of sub workflow instances within this workflow step",
            "items" : {
              "$ref" : "#/components/schemas/SubWorkflowInstance"
            }
          }
        }
      },
      "WorkflowTransition" : {
        "required" : [ "statusId" ],
        "type" : "object",
        "properties" : {
          "statusId" : {
            "type" : "string",
            "description" : "Status that will be assigned to the report by this workflow transition"
          },
          "actionText" : {
            "type" : "string",
            "description" : "Action text for this workflow transition"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the workflow transition"
          },
          "description" : {
            "type" : "string",
            "description" : "Description for the workflow transition"
          }
        }
      },
      "TravelDiary" : {
        "required" : [ "activityEndDate", "activityLocation", "activityPurpose", "activityStartDate", "link" ],
        "type" : "object",
        "properties" : {
          "travelDiaryId" : {
            "type" : "string"
          },
          "activityStartDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityEndDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the traveldiary as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date-time"
          },
          "activityLocation" : {
            "type" : "string",
            "description" : "Location of the travel diary "
          },
          "activityPurpose" : {
            "type" : "string",
            "description" : "Purpose of the travel "
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          }
        },
        "description" : "TravelDiary"
      },
      "CompanyDisbursements" : {
        "required" : [ "dueEmployee" ],
        "type" : "object",
        "properties" : {
          "dueEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "cashAdvanceUtilized" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalUtilizedBalanceDue" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "otherDisbursements" : {
            "type" : "array",
            "description" : "Other company disbursements",
            "items" : {
              "$ref" : "#/components/schemas/Disbursement"
            }
          }
        },
        "description" : "Company disbursements"
      },
      "Disbursement" : {
        "required" : [ "amount", "payeeName" ],
        "type" : "object",
        "properties" : {
          "payeeName" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        }
      },
      "EmployeeDisbursements" : {
        "required" : [ "dueCompany" ],
        "type" : "object",
        "properties" : {
          "dueCompany" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "otherDisbursements" : {
            "type" : "array",
            "description" : "Other employee disbursements",
            "items" : {
              "$ref" : "#/components/schemas/Disbursement"
            }
          }
        },
        "description" : "Employee disbursements"
      },
      "ExceptionSummary" : {
        "required" : [ "clearedExceptionCount", "exceptionCount", "exceptionLevelMaximum", "exceptionLevelTotal" ],
        "type" : "object",
        "properties" : {
          "exceptionCount" : {
            "type" : "integer",
            "description" : "The total count of exceptions on the report",
            "format" : "int32"
          },
          "clearedExceptionCount" : {
            "type" : "integer",
            "description" : "The total count of cleared exceptions on the report",
            "format" : "int32"
          },
          "exceptionLevelTotal" : {
            "type" : "integer",
            "description" : "The total exception level of the report",
            "format" : "int32"
          },
          "exceptionLevelMaximum" : {
            "type" : "integer",
            "description" : "The maximum exception level reached by the report",
            "format" : "int32"
          }
        },
        "description" : "Exception summary for the report"
      },
      "ReportTotals" : {
        "required" : [ "claimedAmount", "companyDisbursements", "employeeDisbursements", "exceptionSummary", "isCashAdvanceReturnedOnCard", "personalAmount", "rejectedAmount", "reportTotal" ],
        "type" : "object",
        "properties" : {
          "reportTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "personalAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "cashAdvanceReturnsAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "rejectedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalAmountPaidEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalAmountPaidNonEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "companyDisbursements" : {
            "$ref" : "#/components/schemas/CompanyDisbursements"
          },
          "employeeDisbursements" : {
            "$ref" : "#/components/schemas/EmployeeDisbursements"
          },
          "utilizedBalanceDues" : {
            "type" : "array",
            "description" : "List of utilized amount due company from prior reports",
            "items" : {
              "$ref" : "#/components/schemas/UtilizedBalanceDue"
            }
          },
          "redirectFund" : {
            "$ref" : "#/components/schemas/RedirectFund"
          },
          "isCashAdvanceReturnedOnCard" : {
            "type" : "boolean",
            "description" : "Whether the attribute determines if the user returned the remaining cash advance to the card directly. "
          },
          "exceptionSummary" : {
            "$ref" : "#/components/schemas/ExceptionSummary"
          }
        }
      },
      "UtilizedBalanceDue" : {
        "required" : [ "amount", "reportId", "reportNumber" ],
        "type" : "object",
        "properties" : {
          "reportId" : {
            "type" : "string"
          },
          "reportNumber" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        }
      },
      "NewTaxData" : {
        "required" : [ "taxFormId" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "reclaimCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax reclaim code."
          },
          "reclaimTransactionAmount" : {
            "type" : "number",
            "description" : "The tax reclaim transaction amount"
          },
          "taxAuthorityId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax authority"
          },
          "taxAuthorityName" : {
            "type" : "string",
            "description" : "The name of the tax authority"
          },
          "taxCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax code."
          },
          "taxLabel" : {
            "type" : "string",
            "description" : "The localized label of the tax authority"
          },
          "taxFormId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax form associated with the expense"
          },
          "taxRateTypeId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax rate type id"
          },
          "taxRateTypeName" : {
            "type" : "string",
            "description" : "The name of the tax rate type"
          },
          "taxReclaimConfigurationId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax reclaim configuration id"
          },
          "taxTransactionAmount" : {
            "type" : "number",
            "description" : "The tax transaction amount"
          }
        },
        "description" : "NewTaxData"
      },
      "CustomField" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The short code for the list item. For non-list fields, this value will be blank"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the non-list item. For list fields, this value will be blank. Maximum length: 64 characters"
          },
          "listItemId" : {
            "type" : "string",
            "description" : "The unique identifier of the list item. For non-list fields, this value will be blank"
          },
          "isValid" : {
            "type" : "boolean",
            "description" : "Whether the value returned is valid or not. This value is returned for custom fields of all data types and is specifically evaluated for list items to represent the current status. Default value: true"
          }
        },
        "description" : "The source or content of the default value for the form field"
      },
      "FormField" : {
        "required" : [ "controlType", "dataType", "fieldAccess", "fieldId", "isExternalList", "requiredForAutoSave" ],
        "type" : "object",
        "properties" : {
          "parentFieldId" : {
            "type" : "string",
            "description" : " For connected list, the form field of the previous segment. For simple list or non-list items, this value will be blank"
          },
          "controlType" : {
            "type" : "string",
            "description" : "The control type for the form field",
            "enum" : [ "Checkbox", "DateEdit", "Edit", "ListEdit", "MultiPicklist", "Picklist", "TextArea", "Time", "LaunchUrlSingle", "LaunchUrlMulti" ]
          },
          "dataType" : {
            "type" : "string",
            "description" : "The data type for the form field",
            "enum" : [ "Amount", "Boolean", "ConnectedList", "Date", "Integer", "List", "Numeric", "String" ]
          },
          "defaultValue" : {
            "$ref" : "#/components/schemas/CustomField"
          },
          "fieldAccess" : {
            "type" : "string",
            "description" : "The supplied user’s access to the form field",
            "enum" : [ "HD", "RO", "RW", "HD = hidden", "RO = read-only", "RW = read-write" ]
          },
          "fieldId" : {
            "type" : "string",
            "description" : "The field id"
          },
          "formFieldId" : {
            "type" : "string",
            "description" : "The unique identifier of the form field"
          },
          "fieldName" : {
            "type" : "string",
            "description" : "The label of the form field"
          },
          "fieldSequence" : {
            "type" : "integer",
            "description" : "The field location in the numerical order of the form fields on the form",
            "format" : "int32"
          },
          "hasLineSeparator" : {
            "type" : "boolean",
            "description" : "Indicates whether the form field has a line separator"
          },
          "isCopyDownSource" : {
            "type" : "boolean",
            "description" : "Indicates whether the form field is a copy down source for other fields"
          },
          "listId" : {
            "type" : "string",
            "description" : "The unique identifier of the source list to be used for this form field"
          },
          "listLevel" : {
            "type" : "integer",
            "description" : "For connected list, the hierarchical position of this field in the list. For simple list or non-list items, this value will be blank",
            "format" : "int32"
          },
          "isExternalList" : {
            "type" : "boolean",
            "description" : "Indicates whether the form field is configured as an external list and makes use of the fetch list connector"
          },
          "maximumLength" : {
            "type" : "integer",
            "description" : "The maximum length allowed for the form field",
            "format" : "int32"
          },
          "isRequired" : {
            "type" : "boolean",
            "description" : "Whether a value is required for the form field"
          },
          "tooltip" : {
            "type" : "string",
            "description" : "The tool tip value of the form field"
          },
          "validationExpression" : {
            "type" : "string",
            "description" : "The validation expression (Regular Expression) associated with the form field"
          },
          "validationMessage" : {
            "type" : "string",
            "description" : "The failure message for the form field validation"
          },
          "itemizationCopyDownAction" : {
            "type" : "string",
            "description" : "Itemization copy down action only used by the child entries of itemizations. = ['ConfiguredCopyDown', 'None', 'ParentExpense']"
          },
          "requiredForAutoSave" : {
            "type" : "boolean",
            "description" : "A boolean value which indicates if this field is required to be populated to perform a save even if all required field values are not provided."
          },
          "referenceLink" : {
            "type" : "string",
            "description" : "The URL of the related HATEOAS link that you can use for subsequent calls"
          },
          "targetFieldSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TargetFieldSetting"
            }
          }
        }
      },
      "TargetFieldSetting" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "enum" : [ "SHOW", "HIDE" ]
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "after", "before", "lessThan", "greaterThan", "contains", "notContain", "endsWith", "beginsWith", "equals" ]
          },
          "value" : {
            "type" : "string"
          },
          "searchBy" : {
            "type" : "string",
            "enum" : [ "value", "code" ]
          },
          "formFieldId" : {
            "type" : "string"
          }
        }
      },
      "DailyReimbursableAllowanceSummary" : {
        "required" : [ "date", "incidentalsExpenses", "incidentalsExpensesReimbursableTotal", "incidentalsExpensesTotal", "lodgingExpenses", "lodgingExpensesReimbursableTotal", "lodgingExpensesTotal", "mealsExpenses", "mealsExpensesReimbursableTotal", "mealsExpensesTotal" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "description" : "Date of reimbursable allowances for this report in YYYY-MM-DD",
            "format" : "date"
          },
          "lodgingExpensesTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "mealsExpensesTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "incidentalsExpensesTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "lodgingExpensesReimbursableTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "mealsExpensesReimbursableTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "incidentalsExpensesReimbursableTotal" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "lodgingExpenses" : {
            "type" : "array",
            "description" : "List of all lodging reimbursable allowance expenses for specified date.",
            "items" : {
              "$ref" : "#/components/schemas/ReimbursableAllowanceExpense"
            }
          },
          "mealsExpenses" : {
            "type" : "array",
            "description" : "List of all meals reimbursable allowance expenses for specified date.",
            "items" : {
              "$ref" : "#/components/schemas/ReimbursableAllowanceExpense"
            }
          },
          "incidentalsExpenses" : {
            "type" : "array",
            "description" : "List of incidental reimbursable allowance expenses for specified date.",
            "items" : {
              "$ref" : "#/components/schemas/ReimbursableAllowanceExpense"
            }
          }
        },
        "description" : "List of daily summaries of all reimbursable allowances for this report"
      },
      "ReimbursableAllowanceExpense" : {
        "required" : [ "expenseId", "expenseType", "location", "postedAmount", "reimbursableAmount", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense corresponding to this reimbursable allowance"
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "reimbursableAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          }
        }
      },
      "ReimbursableAllowanceSummary" : {
        "required" : [ "dailyReimbursableAllowanceSummaryList" ],
        "type" : "object",
        "properties" : {
          "dailyReimbursableAllowanceSummaryList" : {
            "type" : "array",
            "description" : "List of daily summaries of all reimbursable allowances for this report",
            "items" : {
              "$ref" : "#/components/schemas/DailyReimbursableAllowanceSummary"
            }
          }
        }
      },
      "ExpenseSourceIdentifiers" : {
        "type" : "object",
        "properties" : {
          "creditCardTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the credit card transaction (indexed transactionId) associated with the expense"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "expenseCaptureImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense capture image associated with the expense"
          },
          "quickExpenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the mobile expense associated with the expense"
          },
          "personalCardTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the personal card transaction associated with the expense"
          },
          "segmentId" : {
            "type" : "integer",
            "description" : "The unique identifier of the segment associated with the expense",
            "format" : "int64"
          },
          "tripId" : {
            "type" : "integer",
            "description" : "The unique identifier of the trip id associated with the expense",
            "format" : "int64"
          },
          "segmentTypeId" : {
            "type" : "string",
            "description" : "Segment type id associated with the trip.",
            "enum" : [ "AIRFR - Air Ticket", "AIRSU - Air Subscription", "CARRT - Car Rental", "DININ - Dining", "EVENT - Event", "HOTEL - Hotel Reservation", "INSUR - Insurance", "LIMOF - Limousine Reservation", "MISC - Miscellaneous", "PARKG - Parking Fee", "RAILF - Train Ticket", "RAISU - Train Subscription", "TAXIF - Taxi Fare", "VISA - Visa" ]
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique identifier to identify a Japan rail route"
          },
          "ereceiptId" : {
            "type" : "string"
          },
          "ereceiptURL" : {
            "type" : "string"
          }
        },
        "description" : "The list of expense sources associated with the expense"
      },
      "ReportEntrySummary" : {
        "required" : [ "allocationState", "canDelete", "exchangeRate", "expenseId", "expenseType", "hasBlockingExceptions", "hasExceptions", "hasMissingReceiptDeclaration", "isAutoCreated", "isImageRequired", "isPaperReceiptRequired", "isPersonalExpense", "paymentType", "postedAmount", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "allocationSetId" : {
            "type" : "string",
            "description" : "The identifier of the Allocation set associated with the expense. Allocations which belong to the same set were created at the same time"
          },
          "allocationState" : {
            "type" : "string",
            "description" : "Allocation state for the expense.",
            "enum" : [ "FULLY_ALLOCATED", "NOT_ALLOCATED", "PARTIALLY_ALLOCATED" ]
          },
          "approverAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "attendeeCount" : {
            "type" : "integer",
            "description" : "The total number of attendees associated with the expense",
            "format" : "int32"
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "canDelete" : {
            "type" : "boolean",
            "description" : "Indicates whether or not the expense entry can be deleted"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "ereceiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the eReceipt image associated with the expense"
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier for the expense"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "Expense Id of the parent expense"
          },
          "expenseSourceIdentifiers" : {
            "$ref" : "#/components/schemas/ExpenseSourceIdentifiers"
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "hasBlockingExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions that blocks it from being submitted"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions"
          },
          "hasMissingReceiptDeclaration" : {
            "type" : "boolean",
            "description" : "Whether the expense has an affidavit declaration for missing receipt"
          },
          "isAutoCreated" : {
            "type" : "boolean",
            "description" : "Whether the expense is auto created"
          },
          "imageCertificationStatus" : {
            "type" : "string",
            "description" : "The final status of the receipt image associated with the expense. Possible values: Refer [Receipts Status V4 API](https://github.concur.com/receipts/receipt-service/wiki/GRDC-API-Docs#possible-digitizationstatus-codes)"
          },
          "isImageRequired" : {
            "type" : "boolean",
            "description" : "Whether the image is required for the expense"
          },
          "isPaperReceiptRequired" : {
            "type" : "boolean",
            "description" : "Whether the paper receipt is required for the expense to be submitted"
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "links" : {
            "type" : "array",
            "description" : "Resource links related to this call.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "ticketNumber" : {
            "type" : "string",
            "description" : "The ticket number associated with the travel"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "allocationVersion" : {
            "type" : "string",
            "format" : "date-time",
            "writeOnly" : true
          }
        },
        "description" : "ReportExpenseSummary"
      },
      "ExpenseTaxSummary" : {
        "type" : "object",
        "properties" : {
          "totalTaxPostedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalTaxAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalReclaimPostedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalReclaimAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "netTaxAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "netAdjustedTaxAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "netReclaimAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "netReclaimAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "vatTaxTotal" : {
            "$ref" : "#/components/schemas/Amount"
          }
        },
        "description" : "Tax information for the expense. Please refer to the 'ExpenseTaxSummary' object for more information"
      },
      "ReportEntryDetail" : {
        "required" : [ "allocationState", "canAllocate", "canDelete", "exchangeRate", "expenseId", "expenseType", "hasBlockingExceptions", "hasExceptions", "hasMissingReceiptDeclaration", "isAutoCreated", "isExcludedFromCashAdvanceByUser", "isExpenseBillable", "isExpenseRejected", "isImageRequired", "isPaperReceiptReceived", "isPaperReceiptRequired", "isPersonalExpense", "paymentType", "postedAmount", "taxRateLocation", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "allocationSetId" : {
            "type" : "string",
            "description" : "The identifier of the Allocation set associated with the expense. Allocations which belong to the same set were created at the same time"
          },
          "allocationState" : {
            "type" : "string",
            "description" : "Allocation state for the expense.",
            "enum" : [ "FULLY_ALLOCATED", "NOT_ALLOCATED", "PARTIALLY_ALLOCATED" ]
          },
          "approverAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "attendeeCount" : {
            "type" : "integer",
            "description" : "The total number of attendees associated with the expense",
            "format" : "int32"
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "canDelete" : {
            "type" : "boolean",
            "description" : "Indicates whether or not the expense entry can be deleted"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "ereceiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the eReceipt image associated with the expense"
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier for the expense"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "Expense Id of the parent expense"
          },
          "expenseSourceIdentifiers" : {
            "$ref" : "#/components/schemas/ExpenseSourceIdentifiers"
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "hasBlockingExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions that blocks it from being submitted"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions"
          },
          "hasMissingReceiptDeclaration" : {
            "type" : "boolean",
            "description" : "Whether the expense has an affidavit declaration for missing receipt"
          },
          "isAutoCreated" : {
            "type" : "boolean",
            "description" : "Whether the expense is auto created"
          },
          "imageCertificationStatus" : {
            "type" : "string",
            "description" : "The final status of the receipt image associated with the expense. Possible values: Refer [Receipts Status V4 API](https://github.concur.com/receipts/receipt-service/wiki/GRDC-API-Docs#possible-digitizationstatus-codes)"
          },
          "isImageRequired" : {
            "type" : "boolean",
            "description" : "Whether the image is required for the expense"
          },
          "isPaperReceiptRequired" : {
            "type" : "boolean",
            "description" : "Whether the paper receipt is required for the expense to be submitted"
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "links" : {
            "type" : "array",
            "description" : "Resource links related to this call.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "authorizationRequestExpenseId" : {
            "type" : "string",
            "description" : "The authorization request expense id associated with the expense"
          },
          "budgetAccrualDate" : {
            "type" : "string",
            "description" : "The budget accrual date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "canAllocate" : {
            "type" : "boolean",
            "description" : "Whether the expense can be allocated"
          },
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the expense based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "expenseTaxSummary" : {
            "$ref" : "#/components/schemas/ExpenseTaxSummary"
          },
          "isExcludedFromCashAdvanceByUser" : {
            "type" : "boolean",
            "description" : "Whether the user has excluded the expense from cash advance"
          },
          "isExpenseBillable" : {
            "type" : "boolean",
            "description" : "Whether the expense is billable"
          },
          "isExpenseRejected" : {
            "type" : "boolean",
            "description" : "Whether the approver or processor has rejected this expense in the report. If this is true then this expense will be sent back to the report submitted in an addendum (split) report"
          },
          "isPaperReceiptReceived" : {
            "type" : "boolean",
            "description" : "Whether the paper receipt was received for the expense"
          },
          "merchantTaxId" : {
            "type" : "string",
            "description" : "Merchant tax id for the expense"
          },
          "mileage" : {
            "$ref" : "#/components/schemas/Mileage"
          },
          "receiptType" : {
            "$ref" : "#/components/schemas/ReceiptType"
          },
          "taxRateLocation" : {
            "type" : "string",
            "description" : "Transaction location relative to the employee's home location as defined by their user profile.",
            "enum" : [ "FOREIGN", "HOME", "OUT_OF_PROVINCE", "FOREIGN - The expense transaction took place in foreign currency", "HOME - The expense transaction took place in the reimbursement currency", "OUT_OF_PROVINCE - The expense transaction took place outside the state jurisdiction" ],
            "default" : "HOME"
          },
          "travel" : {
            "$ref" : "#/components/schemas/Travel"
          },
          "xmlReceiptId" : {
            "type" : "string",
            "description" : "The unique identifier of the XML receipt associated with the expense"
          },
          "allocationVersion" : {
            "type" : "string",
            "format" : "date-time",
            "writeOnly" : true
          }
        },
        "description" : "ReportExpenseDetail"
      },
      "ExpenseTaxData" : {
        "required" : [ "taxAuthorityId" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "reclaimCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax reclaim code."
          },
          "reclaimTransactionAmount" : {
            "type" : "number",
            "description" : "The tax reclaim transaction amount"
          },
          "taxAuthorityId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax authority"
          },
          "taxAuthorityName" : {
            "type" : "string",
            "description" : "The name of the tax authority"
          },
          "taxCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "The tax code."
          },
          "taxLabel" : {
            "type" : "string",
            "description" : "The localized label of the tax authority"
          },
          "taxFormId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax form associated with the expense"
          },
          "taxRateTypeId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax rate type id"
          },
          "taxRateTypeName" : {
            "type" : "string",
            "description" : "The name of the tax rate type"
          },
          "taxReclaimConfigurationId" : {
            "type" : "string",
            "description" : "The unique identifier of the tax reclaim configuration id"
          },
          "taxTransactionAmount" : {
            "type" : "number",
            "description" : "The tax transaction amount"
          },
          "taxPostedAmount" : {
            "type" : "number",
            "description" : "The tax posted amount"
          },
          "taxReclaimPostedAmount" : {
            "type" : "number",
            "description" : "The tax reclaim posted amount"
          }
        },
        "description" : "ExpenseTaxData"
      },
      "TaxData" : {
        "required" : [ "expenseTaxes" ],
        "type" : "object",
        "properties" : {
          "expenseTax1" : {
            "$ref" : "#/components/schemas/ExpenseTaxData"
          },
          "expenseTax2" : {
            "$ref" : "#/components/schemas/ExpenseTaxData"
          },
          "expenseTaxes" : {
            "type" : "array",
            "description" : "The taxes for the expense. Please refer to the 'ExpenseTaxData' object for more information",
            "items" : {
              "$ref" : "#/components/schemas/ExpenseTaxData"
            }
          }
        },
        "description" : "TaxData"
      },
      "ReportEntryItemizationSummary" : {
        "required" : [ "allocationState", "canDelete", "exchangeRate", "expenseId", "expenseType", "hasBlockingExceptions", "hasExceptions", "hasMissingReceiptDeclaration", "isAutoCreated", "isImageRequired", "isPaperReceiptRequired", "isPersonalExpense", "paymentType", "postedAmount", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "allocationSetId" : {
            "type" : "string",
            "description" : "The identifier of the Allocation set associated with the expense. Allocations which belong to the same set were created at the same time"
          },
          "allocationState" : {
            "type" : "string",
            "description" : "Allocation state for the expense.",
            "enum" : [ "FULLY_ALLOCATED", "NOT_ALLOCATED", "PARTIALLY_ALLOCATED" ]
          },
          "approverAdjustedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "attendeeCount" : {
            "type" : "integer",
            "description" : "The total number of attendees associated with the expense",
            "format" : "int32"
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "canDelete" : {
            "type" : "boolean",
            "description" : "Indicates whether or not the expense entry can be deleted"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "ereceiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the eReceipt image associated with the expense"
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier for the expense"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "Expense Id of the parent expense"
          },
          "expenseSourceIdentifiers" : {
            "$ref" : "#/components/schemas/ExpenseSourceIdentifiers"
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "hasBlockingExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions that blocks it from being submitted"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the expense has any exceptions"
          },
          "hasMissingReceiptDeclaration" : {
            "type" : "boolean",
            "description" : "Whether the expense has an affidavit declaration for missing receipt"
          },
          "isAutoCreated" : {
            "type" : "boolean",
            "description" : "Whether the expense is auto created"
          },
          "imageCertificationStatus" : {
            "type" : "string",
            "description" : "The final status of the receipt image associated with the expense. Possible values: Refer [Receipts Status V4 API](https://github.concur.com/receipts/receipt-service/wiki/GRDC-API-Docs#possible-digitizationstatus-codes)"
          },
          "isImageRequired" : {
            "type" : "boolean",
            "description" : "Whether the image is required for the expense"
          },
          "isPaperReceiptRequired" : {
            "type" : "boolean",
            "description" : "Whether the paper receipt is required for the expense to be submitted"
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "links" : {
            "type" : "array",
            "description" : "Resource links related to this call.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "ticketNumber" : {
            "type" : "string",
            "description" : "The ticket number associated with the travel"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "allocationVersion" : {
            "type" : "string",
            "format" : "date-time",
            "writeOnly" : true
          }
        },
        "description" : "ReportExpenseItemizationSummary"
      },
      "ReportException" : {
        "required" : [ "exceptionCode", "isBlocking" ],
        "type" : "object",
        "properties" : {
          "exceptionCode" : {
            "type" : "string",
            "description" : "The unique identifier of the exception type"
          },
          "isBlocking" : {
            "type" : "boolean",
            "description" : "Whether the exception will prevent the report from being submitted"
          },
          "message" : {
            "type" : "string",
            "description" : "Description of the exception, in the user's language"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Data enabling specific identification of the issue underlying the exception"
            },
            "description" : "Data enabling specific identification of the issue underlying the exception"
          },
          "allocationId" : {
            "type" : "string",
            "description" : "The unique identifier of the allocation to which the exception relates"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense to which the exception relates"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the parent expense when the exception relates to an itemized expense"
          }
        },
        "description" : "ReportException"
      },
      "CommentDetails" : {
        "required" : [ "author", "comment", "createdForEmployee", "creationDate", "isAuditorComment", "isLatest" ],
        "type" : "object",
        "properties" : {
          "comment" : {
            "maxLength" : 2000,
            "minLength" : 0,
            "type" : "string",
            "description" : "The comments input on the report/expense by all users"
          },
          "author" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "createdForEmployee" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "createdForEmployeeId" : {
            "type" : "string",
            "description" : "The unique identifier of the Employee the comment was created on behalf of. This would differ from the comment author only in the case of delegates creating the comment"
          },
          "creationDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the comment was created on the report/expense (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ.SSS'Z'",
            "format" : "date-time"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense"
          },
          "isAuditorComment" : {
            "type" : "boolean",
            "description" : "Whether this comment has been authored by an auditor"
          },
          "isLatest" : {
            "type" : "boolean",
            "description" : "This attribute represents whether a specific comment is the latest comment by the user"
          },
          "stepInstanceId" : {
            "type" : "string",
            "description" : "The unique identifier of the step instance"
          }
        },
        "description" : "CommentDetails"
      },
      "ExpenseAttendeeWithAmounts" : {
        "required" : [ "approvedAmount", "attendeeId", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "attendeeId" : {
            "type" : "string",
            "description" : "The unique identifier of the associated expense attendee within Concur"
          },
          "customData" : {
            "type" : "array",
            "description" : "The set of data the custom fields contain for the attendee based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "isAmountUserEdited" : {
            "type" : "boolean",
            "description" : "This field indicates if the amount value for the attendee on this expense was ever manually edited by the end user. Default value: false"
          },
          "isTraveling" : {
            "type" : "boolean",
            "description" : "Whether the attendee was traveling when the expense was incurred, used for FBT tax calculations"
          },
          "associatedAttendeeCount" : {
            "type" : "integer",
            "description" : "The count of total attendees. A count greater than 1 means there are unnamed attendees associated with this expense-attendee record. Default value: 1",
            "format" : "int32"
          },
          "versionNumber" : {
            "type" : "integer",
            "description" : "The version number of the attendee. This field value may always be 1, depending on the configuration. Default value: 1",
            "format" : "int32"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        }
      },
      "ExpenseAttendeesWithAmounts" : {
        "type" : "object",
        "properties" : {
          "noShowAttendeeCount" : {
            "type" : "integer",
            "description" : "The number of attendees that were planned but did not show up.",
            "format" : "int32",
            "default" : 0
          },
          "expenseAttendeeList" : {
            "maxItems" : 500,
            "type" : "array",
            "description" : "The list of attendees associated with the expense.",
            "items" : {
              "$ref" : "#/components/schemas/ExpenseAttendeeWithAmounts"
            }
          }
        }
      },
      "Allocation" : {
        "required" : [ "allocationId", "expenseId", "isSystemAllocation", "percentage" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "allocationId" : {
            "type" : "string",
            "description" : " The unique identifier of the allocation"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The ledger account code associated with the allocation"
          },
          "overLimitAccountCode" : {
            "type" : "string",
            "description" : " The ledger account code associated with the allocation if it exceeds a pre-defined threshold, for example, the user’s travel allowance limit "
          },
          "allocationAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense associated with the allocation"
          },
          "isSystemAllocation" : {
            "type" : "boolean",
            "description" : "Whether the allocation is a system allocation, usually hidden from the user. If displayed to the user, should be read-only"
          },
          "isPercentEdited" : {
            "type" : "boolean",
            "description" : "Whether the allocation percent has been edited"
          },
          "percentage" : {
            "type" : "number",
            "description" : "The percentage of the total expense that this allocation represents"
          }
        },
        "description" : "Allocation Details"
      },
      "DefaultAllocation" : {
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          }
        }
      },
      "NewExpenseForm" : {
        "required" : [ "exchangeRate", "expenseType", "paymentType", "transactionAmount" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "authorizationRequestExpenseId" : {
            "type" : "string",
            "description" : "The authorization request expense id associated with the expense"
          },
          "businessPurpose" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The text input for the business purpose by the user."
          },
          "comment" : {
            "maxLength" : 2000,
            "type" : "string",
            "description" : "A comment that describes the expense."
          },
          "exchangeRate" : {
            "$ref" : "#/components/schemas/ExchangeRate"
          },
          "expenseSource" : {
            "type" : "string",
            "description" : "The source of the expense. Possible values: EA - Expense Assistant, MOB - Mobile, OTHER - Unknown, SE - Smart Expense, TA - Travel Allowance, TR - Travel Request, UI - Web UI",
            "enum" : [ "EA", "MOB", "OTHER", "SE", "TA", "TR", "UI" ]
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/ExpenseType"
          },
          "isExpenseBillable" : {
            "type" : "boolean",
            "description" : "Whether the expense is billable.",
            "default" : false
          },
          "isPersonalExpense" : {
            "type" : "boolean",
            "description" : "Whether the expense is marked as personal (that is, non-reimbursable) by the user.",
            "default" : false
          },
          "isExcludedFromCashAdvanceByUser" : {
            "type" : "boolean",
            "description" : "Whether the user has excluded the expense from cash advance.",
            "default" : false
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "merchantTaxId" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The merchant tax id for the expense."
          },
          "mileage" : {
            "$ref" : "#/components/schemas/Mileage"
          },
          "parentExpenseId" : {
            "type" : "string",
            "description" : "The expense Id of the parent expense"
          },
          "paymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          },
          "receiptImageId" : {
            "type" : "string",
            "description" : "The unique identifier of the image associated with the expense"
          },
          "receiptType" : {
            "$ref" : "#/components/schemas/ReceiptType"
          },
          "smartExpense" : {
            "$ref" : "#/components/schemas/SmartExpense"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "taxRateLocation" : {
            "type" : "string",
            "description" : "Transaction location relative to the employee's home location as defined by their user profile. Possible values: FOREIGN - The expense transaction took place in foreign currency, HOME - The expense transaction took place in the reimbursement currency, OUT_OF_PROVINCE - The expense transaction took place outside the state jurisdiction.",
            "enum" : [ "FOREIGN", "HOME", "OUT_OF_PROVINCE" ],
            "default" : "HOME"
          },
          "transactionAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionDate" : {
            "type" : "string",
            "description" : "The transaction date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "travelAllowance" : {
            "$ref" : "#/components/schemas/TravelAllowance"
          },
          "travel" : {
            "$ref" : "#/components/schemas/Travel"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/Vendor"
          },
          "jptRouteId" : {
            "type" : "string",
            "description" : "The unique route ID to identify a Japan rail route"
          },
          "fuelTypeListItem" : {
            "$ref" : "#/components/schemas/CustomData"
          },
          "budgetAccrualDate" : {
            "type" : "string",
            "description" : "The budget accrual date (ISO-8601) of the expense (https://en.wikipedia.org/wiki/ISO_8601)Format: YYYY-MM-DD",
            "format" : "date"
          }
        },
        "description" : "NewExpenseDetails"
      },
      "AuditDescription" : {
        "required" : [ "key", "values" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "description" : "Audit Description Values.",
            "items" : {
              "$ref" : "#/components/schemas/AuditDescriptionValue"
            }
          }
        },
        "description" : "Audit Description holds the list of Audit Descriptions"
      },
      "AuditDescriptionValue" : {
        "required" : [ "index", "key", "value" ],
        "type" : "object",
        "properties" : {
          "index" : {
            "type" : "integer",
            "description" : "The position of this description value in natural order with zero-based indexing",
            "format" : "int32"
          },
          "key" : {
            "type" : "string",
            "description" : "The field name of this description value"
          },
          "value" : {
            "type" : "string",
            "description" : "The field value of this description value"
          }
        },
        "description" : "Audit Description Value"
      },
      "AuditTrail" : {
        "required" : [ "action", "date", "description", "type" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "description" : "The UTC datetime of when the audit was recorded (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DDTHH:mm:ssZ",
            "format" : "date-time"
          },
          "action" : {
            "type" : "string"
          },
          "description" : {
            "$ref" : "#/components/schemas/AuditDescription"
          },
          "author" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Report", "Expense" ]
          },
          "externalUpdate" : {
            "type" : "string"
          }
        },
        "description" : "AuditTrail"
      },
      "ReportAllocationResponse" : {
        "required" : [ "allocationId", "expenseId", "isPercentEdited", "isSystemAllocation", "percentage" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "allocationId" : {
            "type" : "string",
            "description" : " The unique identifier of the allocation"
          },
          "accountCode" : {
            "type" : "string",
            "description" : "The ledger account code associated with the allocation"
          },
          "overLimitAccountCode" : {
            "type" : "string",
            "description" : " The ledger account code associated with the allocation if it exceeds a pre-defined threshold, for example, the user’s travel allowance limit "
          },
          "allocationAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "expenseId" : {
            "type" : "string",
            "description" : "The unique identifier of the expense associated with the allocation"
          },
          "isSystemAllocation" : {
            "type" : "boolean",
            "description" : "Whether the allocation is a system allocation, usually hidden from the user. If displayed to the user, should be read-only"
          },
          "isPercentEdited" : {
            "type" : "boolean",
            "description" : "Whether the allocation percent has been edited"
          },
          "percentage" : {
            "type" : "number",
            "description" : "The percentage of the total expense that this allocation represents"
          }
        }
      },
      "AllocationTotal" : {
        "required" : [ "amount", "approvedAmount" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "approvedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        },
        "description" : "Allocation Total Details"
      },
      "AllocationFormField" : {
        "required" : [ "controlType", "dataType", "fieldAccess", "fieldId", "isExternalList", "requiredForAutoSave" ],
        "type" : "object",
        "properties" : {
          "parentFieldId" : {
            "type" : "string",
            "description" : " For connected list, the form field of the previous segment. For simple list or non-list items, this value will be blank"
          },
          "controlType" : {
            "type" : "string",
            "description" : "The control type for the form field",
            "enum" : [ "Checkbox", "DateEdit", "Edit", "ListEdit", "MultiPicklist", "Picklist", "TextArea", "Time", "LaunchUrlSingle", "LaunchUrlMulti" ]
          },
          "dataType" : {
            "type" : "string",
            "description" : "The data type for the form field",
            "enum" : [ "Amount", "Boolean", "ConnectedList", "Date", "Integer", "List", "Numeric", "String" ]
          },
          "defaultValue" : {
            "$ref" : "#/components/schemas/CustomField"
          },
          "fieldAccess" : {
            "type" : "string",
            "description" : "The supplied user’s access to the form field",
            "enum" : [ "HD", "RO", "RW", "HD = hidden", "RO = read-only", "RW = read-write" ]
          },
          "fieldId" : {
            "type" : "string",
            "description" : "The field id"
          },
          "formFieldId" : {
            "type" : "string",
            "description" : "The unique identifier of the form field"
          },
          "fieldName" : {
            "type" : "string",
            "description" : "The label of the form field"
          },
          "fieldSequence" : {
            "type" : "integer",
            "description" : "The field location in the numerical order of the form fields on the form",
            "format" : "int32"
          },
          "listId" : {
            "type" : "string",
            "description" : "The unique identifier of the source list to be used for this form field"
          },
          "listLevel" : {
            "type" : "integer",
            "description" : "For connected list, the hierarchical position of this field in the list. For simple list or non-list items, this value will be blank",
            "format" : "int32"
          },
          "isExternalList" : {
            "type" : "boolean",
            "description" : "Indicates whether the form field is configured as an external list and makes use of the fetch list connector"
          },
          "maximumLength" : {
            "type" : "integer",
            "description" : "The maximum length allowed for the form field",
            "format" : "int32"
          },
          "isRequired" : {
            "type" : "boolean",
            "description" : "Whether a value is required for the form field"
          },
          "tooltip" : {
            "type" : "string",
            "description" : "The tool tip value of the form field"
          },
          "validationExpression" : {
            "type" : "string",
            "description" : "The validation expression (Regular Expression) associated with the form field"
          },
          "validationMessage" : {
            "type" : "string",
            "description" : "The failure message for the form field validation"
          },
          "itemizationCopyDownAction" : {
            "type" : "string",
            "description" : "Itemization copy down action only used by the child entries of itemizations. = ['ConfiguredCopyDown', 'None', 'ParentExpense']"
          },
          "requiredForAutoSave" : {
            "type" : "boolean",
            "description" : "A boolean value which indicates if this field is required to be populated to perform a save even if all required field values are not provided."
          },
          "referenceLink" : {
            "type" : "string",
            "description" : "The URL of the related HATEOAS link that you can use for subsequent calls"
          },
          "targetFieldSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TargetFieldSetting"
            }
          }
        }
      },
      "FilterRequest" : {
        "type" : "object",
        "properties" : {
          "request" : {
            "type" : "string"
          }
        }
      },
      "OrderRequest" : {
        "type" : "object",
        "properties" : {
          "request" : {
            "type" : "string"
          }
        }
      },
      "PagedModelPaginatedReportModelResponse" : {
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaginatedReportModelResponse"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "PaginatedReportModelResponse" : {
        "required" : [ "amountDueEmployee", "approvalStatus", "approver", "claimedAmount", "employee", "hasExceptions", "link", "name", "reportDate", "reportId", "reportNumber", "reportType", "submitDate", "totalApprovedAmount" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user."
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "reportId" : {
            "type" : "string",
            "description" : "The unique identifier for the report resource."
          },
          "reportNumber" : {
            "type" : "string",
            "description" : "The 6 character unique identifier for the report resource"
          },
          "approvalStatus" : {
            "type" : "string",
            "description" : "The report’s approval status."
          },
          "submitDate" : {
            "type" : "string",
            "description" : "The UTC datetime when the user submitted the report (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DDTHH:mm:ssZ.",
            "format" : "date-time"
          },
          "approver" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "employee" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "amountDueEmployee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "totalApprovedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "hasExceptions" : {
            "type" : "boolean",
            "description" : "Whether the report has any exceptions."
          },
          "reportType" : {
            "type" : "string",
            "description" : "This value identifies the method used to create the report. Statement refers to company billed statement reports and Auto-created refers to reports created by Expense Assistant.",
            "example" : "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'",
            "enum" : [ "'Regular' or 'Reconciliation' or 'Statement' or 'AutoCreated'" ]
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "crnCode" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeMiddleInitial" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeFirstName" : {
            "type" : "string",
            "writeOnly" : true
          },
          "employeeLastName" : {
            "type" : "string",
            "writeOnly" : true
          }
        },
        "description" : "PaginatedReportToApprove"
      },
      "NewReportForm" : {
        "required" : [ "country", "employee", "imageStatus", "policy", "policyId", "receiptStatus" ],
        "type" : "object",
        "properties" : {
          "customData" : {
            "type" : "array",
            "description" : "This is a set of data that the custom fields contain for the resource based on the configuration. This set might be empty if no custom fields are configured",
            "items" : {
              "$ref" : "#/components/schemas/CustomData"
            }
          },
          "businessPurpose" : {
            "type" : "string",
            "description" : "The text input for the business purpose by the user"
          },
          "comment" : {
            "type" : "string",
            "description" : "The expense report comment added by the user"
          },
          "country" : {
            "type" : "string",
            "description" : "The country name associated with the report (localized as per accept-language header)"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The location country ISO 3166-1 code (https://en.wikipedia.org/wiki/ISO_3166-1)"
          },
          "countrySubDivisionCode" : {
            "type" : "string",
            "description" : "The location country sub division ISO 3166-2 code (https://en.wikipedia.org/wiki/ISO_3166-2)"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "name" : {
            "type" : "string",
            "description" : "The expense report name input by the user"
          },
          "policy" : {
            "type" : "string",
            "description" : "The policy name to which the report adheres (localized as per accept-language header)"
          },
          "policyId" : {
            "type" : "string",
            "description" : "The unique identifier of the policy that applies to this report"
          },
          "reportDate" : {
            "type" : "string",
            "description" : "The date (ISO-8601) assigned to the report by the user (https://en.wikipedia.org/wiki/ISO_8601).  Format: YYYY-MM-DD",
            "format" : "date"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date (ISO-8601) of the report as used for trip-based reporting (https://en.wikipedia.org/wiki/ISO_8601). Format: YYYY-MM-DD",
            "format" : "date"
          },
          "employee" : {
            "$ref" : "#/components/schemas/Employee"
          },
          "receiptStatus" : {
            "type" : "string",
            "description" : "The paper receipts status for the report.",
            "enum" : [ "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED", "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED" ]
          },
          "imageStatus" : {
            "type" : "string",
            "description" : "The linked image status for the report.",
            "enum" : [ "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED", "NOT_RECEIVED", "NOT_REQUIRED", "RECEIVED", "RECEIVED_NOT_REQUIRED" ]
          }
        },
        "description" : "NewReportDetails"
      },
      "AllocationFavoriteWrapper" : {
        "required" : [ "allocations", "formId", "id", "modified", "name", "uri" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "User-defined name of the Allocation Favorite"
          },
          "formId" : {
            "type" : "string",
            "description" : "Allocation `formId` of the Allocation Favorite"
          },
          "allocations" : {
            "type" : "array",
            "description" : "List of allocations which comprises the Allocation Favorite",
            "items" : {
              "$ref" : "#/components/schemas/AllocationFavoriteEntry"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Unique Identifier of the Allocation Favorite"
          },
          "modified" : {
            "type" : "string",
            "description" : "Last modified date and time of the Allocation Favorite",
            "format" : "date-time"
          },
          "uri" : {
            "type" : "string",
            "description" : "URI of the Allocation Favorite"
          }
        }
      },
      "LocalizedText" : {
        "required" : [ "isDefault", "languageCode", "text" ],
        "type" : "object",
        "properties" : {
          "languageCode" : {
            "maxLength" : 5,
            "type" : "string",
            "description" : "A code identifying the language used, consisting of a lowercase, two-letter ISO 639-1 code",
            "example" : "en-US"
          },
          "text" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "The actual text localized in the language as per the language code"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "The boolean indicates if the language is default."
          }
        },
        "description" : "A value type representing a piece of text translated into a number of languages"
      },
      "OneInboxCustomAttribute" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Custom Attribute Code"
          },
          "value" : {
            "type" : "object",
            "description" : "Custom Attribute Value"
          }
        },
        "description" : "A Custom Attribute for One Inbox Task."
      },
      "OneInboxTask" : {
        "required" : [ "applicationId", "applicationInstanceId", "createdAt", "definitionId", "localId", "modifiedAt", "recipientGroups", "recipientUsers", "status", "subject", "tenantId", "uiLink", "urn" ],
        "type" : "object",
        "properties" : {
          "urn" : {
            "type" : "string",
            "description" : "A globally unique URN-based identifier of an entity in the task domain, consisting of a common prefix and a number of segments: 'urn:sap.odm.bpm.<entityType>:<appId>:<appInstId>:<tenantId>:<localId>'"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The application owning this task"
          },
          "applicationInstanceId" : {
            "type" : "string",
            "description" : "The application instance owning this task"
          },
          "tenantId" : {
            "type" : "string",
            "description" : "The tenant ID owning this task"
          },
          "localId" : {
            "type" : "string",
            "description" : "The ID of this task locally within this application instance and tenant"
          },
          "definitionId" : {
            "type" : "string",
            "description" : "The ID of the associated task definition (see urn property of Base entity for pattern description)"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the task.",
            "enum" : [ "READY", "RESERVED", "IN_PROGRESS", "COMPLETED", "FOR_RESUBMISSION", "CANCELED" ]
          },
          "createdAt" : {
            "type" : "string",
            "description" : "When the task was initially created",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Who created the task (null implies created by the application/system)"
          },
          "modifiedAt" : {
            "type" : "string",
            "description" : "When the task was last changed",
            "format" : "date-time"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "Who modified the task (null implies modified by the application/system)"
          },
          "processor" : {
            "type" : "string",
            "description" : "Who is currently assigned to the task and processing it (null implies task is unassigned)"
          },
          "recipientUsers" : {
            "type" : "array",
            "description" : "A list of users entitled to process the task, including the processor",
            "items" : {
              "type" : "string"
            }
          },
          "recipientGroups" : {
            "type" : "array",
            "description" : "A list of Identity Service groups entitled to process the task.",
            "items" : {
              "type" : "string"
            }
          },
          "subject" : {
            "type" : "array",
            "description" : "A localized short text describing what the task is about",
            "items" : {
              "$ref" : "#/components/schemas/LocalizedText"
            }
          },
          "dueAt" : {
            "type" : "string",
            "description" : "When the task is due (null implies task has no due date)",
            "format" : "date-time"
          },
          "completedAt" : {
            "type" : "string",
            "description" : "When the task was completed (null implies not completed yet)",
            "format" : "date-time"
          },
          "priority" : {
            "type" : "string",
            "description" : "What importance the task has",
            "enum" : [ "VERY_HIGH", "HIGH", "MEDIUM", "LOW" ]
          },
          "uiLink" : {
            "type" : "string",
            "description" : "A deep link into a Cloud LoB's application UI to display and process the task"
          },
          "customAttributes" : {
            "type" : "array",
            "description" : "Custom Attributes",
            "items" : {
              "$ref" : "#/components/schemas/OneInboxCustomAttribute"
            }
          },
          "attachmentsCount" : {
            "type" : "integer",
            "description" : "The total number of task attachments",
            "format" : "int32"
          }
        },
        "description" : "An entity identifying a piece of work to be processed and completed by a person"
      },
      "OneInboxCurrencyAmount" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "Localized field label"
          },
          "value" : {
            "type" : "number",
            "description" : "Currency amount"
          },
          "currency" : {
            "type" : "string",
            "description" : "ISO 4217 Currency Code e.g. USD, GBP"
          }
        },
        "description" : "Concur Expense Report Amount with Currency Code"
      },
      "OneInboxExpense" : {
        "type" : "object",
        "properties" : {
          "expenseId" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "postedAmount" : {
            "$ref" : "#/components/schemas/OneInboxCurrencyAmount"
          },
          "transactionDate" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/OneInboxCurrencyAmount"
          },
          "expenseType" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "hasItemizations" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "hasAllocations" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "location" : {
            "$ref" : "#/components/schemas/OneInboxExpenseLocation"
          },
          "vendor" : {
            "$ref" : "#/components/schemas/OneInboxExpenseVendor"
          },
          "expenseImage" : {
            "$ref" : "#/components/schemas/OneInboxReceiptImage"
          }
        },
        "description" : "One Inbox Expense Line Item"
      },
      "OneInboxExpenseLocation" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "Localized field label"
          },
          "name" : {
            "type" : "string",
            "description" : "The location name, localized per the accept-language header if possible"
          },
          "city" : {
            "type" : "string",
            "description" : "The location city name"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The location country ISO 3166-1 code e.g. US, GB"
          }
        },
        "description" : "One Inbox Expense Line Item Location"
      },
      "OneInboxExpenseVendor" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "Localized field label"
          },
          "name" : {
            "type" : "string",
            "description" : "Vendor name, localized as per the accept-language header if possible"
          },
          "description" : {
            "type" : "string",
            "description" : "Vendor long description"
          }
        },
        "description" : "One Inbox Expense Line Item Vendor"
      },
      "OneInboxReceiptImage" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "receiptExpire" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "One Inbox Receipt Image"
      },
      "OneInboxSimpleValue" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "Localized field label"
          },
          "value" : {
            "type" : "object",
            "description" : "Concur Expense Report Details Value"
          }
        },
        "description" : "Concur Expense Report Details String Value Object"
      },
      "OneInboxTaskDetails" : {
        "type" : "object",
        "properties" : {
          "reportId" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "reportName" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "reportOwner" : {
            "$ref" : "#/components/schemas/OneInboxTaskEmployee"
          },
          "reportTotal" : {
            "$ref" : "#/components/schemas/OneInboxCurrencyAmount"
          },
          "claimedAmount" : {
            "$ref" : "#/components/schemas/OneInboxCurrencyAmount"
          },
          "receiptImage" : {
            "$ref" : "#/components/schemas/OneInboxReceiptImage"
          },
          "hasExceptions" : {
            "$ref" : "#/components/schemas/OneInboxSimpleValue"
          },
          "expenses" : {
            "type" : "array",
            "description" : "Concur Expense Report Details expense line Items",
            "items" : {
              "$ref" : "#/components/schemas/OneInboxExpense"
            }
          }
        },
        "description" : "Concur Expense Report Header and Line Item Summary"
      },
      "OneInboxTaskEmployee" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "Localized field label"
          },
          "userId" : {
            "type" : "string",
            "description" : "User's UUID"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name"
          },
          "middleInitial" : {
            "type" : "string",
            "description" : "Middle name/initial"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last/family name"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display name.  Prefer this to <<firstName>> + <<lastName>> for full name display"
          }
        },
        "description" : "Concur Expense Report Details Report Owner"
      },
      "OneInboxCapability" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "boolean"
          }
        },
        "description" : "A name, value pair, defining a given capability, supported by the task provider."
      },
      "OneInboxCustomAttributeDefinition" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "A technical name identifying the custom attribute within the task it belongs to and matching the id of one of the task's task definition's custom attributes"
          },
          "name" : {
            "type" : "array",
            "description" : "A technical name identifying the custom attribute definition within the task definition it belongs to",
            "items" : {
              "$ref" : "#/components/schemas/LocalizedText"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The data type of the custom attribute.",
            "enum" : [ "STRING", "BOOLEAN", "INTEGER", "FLOAT", "DATE", "DATETIME", "TIME" ]
          },
          "format" : {
            "type" : "string",
            "description" : "A modifier property that provides additional instructions to the client on how to render a custom attribute of a given type."
          }
        },
        "description" : "Definition of the attributes to present with tasks"
      },
      "OneInboxTaskDefinition" : {
        "required" : [ "applicationId", "applicationInstanceId", "localId", "tenantId", "urn" ],
        "type" : "object",
        "properties" : {
          "urn" : {
            "type" : "string",
            "description" : "A globally unique URN-based identifier of an entity in the task domain, consisting of a common prefix and a number of segments: 'urn:sap.odm.bpm.<entityType>:<appId>:<appInstId>:<tenantId>:<localId>'"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The application owning this task"
          },
          "applicationInstanceId" : {
            "type" : "string",
            "description" : "The application instance owning this task"
          },
          "tenantId" : {
            "type" : "string",
            "description" : "The tenant ID owning this task"
          },
          "localId" : {
            "type" : "string",
            "description" : "The ID of this task locally within this application instance and tenant"
          },
          "name" : {
            "type" : "array",
            "description" : "The localized name of the task definition",
            "items" : {
              "$ref" : "#/components/schemas/LocalizedText"
            }
          },
          "possibleResponses" : {
            "type" : "array",
            "description" : "A list of possible completion actions on tasks of this type",
            "items" : {
              "$ref" : "#/components/schemas/ResponseDefinition"
            }
          },
          "customAttributes" : {
            "type" : "array",
            "description" : "A localized list of additional attributes to present with the taskdefinition",
            "items" : {
              "$ref" : "#/components/schemas/OneInboxCustomAttributeDefinition"
            }
          },
          "capabilities" : {
            "type" : "array",
            "description" : "Which operations are supported by tasks, having this task definition",
            "items" : {
              "$ref" : "#/components/schemas/OneInboxCapability"
            }
          }
        },
        "description" : "An entity providing common type information for a set of tasks; aka task type"
      },
      "ReasonDefinition" : {
        "required" : [ "code", "name" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "A code identifying the reason within the response it belongs to"
          },
          "name" : {
            "type" : "array",
            "description" : "The localized title of the reason",
            "items" : {
              "$ref" : "#/components/schemas/LocalizedText"
            }
          }
        },
        "description" : "A value type describing a possible motivation for a particular response of a task definition"
      },
      "ResponseDefinition" : {
        "required" : [ "code", "name" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "A code identifying the response within the task definition it belongs to",
            "enum" : [ "APPROVE", "SENDBACK" ]
          },
          "name" : {
            "type" : "array",
            "description" : "The localized name of the response",
            "items" : {
              "$ref" : "#/components/schemas/LocalizedText"
            }
          },
          "nature" : {
            "type" : "string",
            "description" : "Whether the response is positive, negative, or neutral in nature",
            "enum" : [ "POSITIVE", "NEGATIVE", "NEUTRAL" ]
          },
          "commentRequired" : {
            "type" : "string",
            "description" : "Whether a comment is required or supported for this response",
            "enum" : [ "REQUIRED", "OPTIONAL", "UNSUPPORTED" ]
          },
          "reasonRequired" : {
            "type" : "string",
            "description" : "Whether a reason is required or supported for this response",
            "enum" : [ "REQUIRED", "OPTIONAL", "UNSUPPORTED" ]
          },
          "possibleReasons" : {
            "type" : "array",
            "description" : "A list of possible reasons to choose from",
            "items" : {
              "$ref" : "#/components/schemas/ReasonDefinition"
            }
          },
          "uiLink" : {
            "type" : "string",
            "description" : "A deep link into a Cloud LoB's application UI to display and process the task, giving this response"
          }
        },
        "description" : "A list of possible completion actions on tasks of this type"
      },
      "ReportAccess" : {
        "required" : [ "context" ],
        "type" : "object",
        "properties" : {
          "context" : {
            "type" : "string",
            "description" : "The applicable user context for accessing a report",
            "enum" : [ "TRAVELER", "MANAGER", "PROCESSOR", "PROXY" ]
          },
          "actAsUserId" : {
            "type" : "string",
            "description" : "The id of the user being delegated for, if applicable"
          }
        },
        "description" : "ReportAccess"
      }
    },
    "parameters" : {
      "concur-correlationid" : {
        "name" : "concur-correlationid",
        "in" : "header",
        "description" : "The unique identifier of the consumer making the API calls. Minimum length: 6 characters",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "concur-route" : {
        "name" : "concur-route",
        "in" : "header",
        "description" : "The Concur route for the API call",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "concur-forwarded-for" : {
        "name" : "concur-forwarded-for",
        "in" : "header",
        "description" : "CN for x509 authentication",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "accept-language" : {
        "name" : "accept-language",
        "in" : "header",
        "description" : "The unique identifier of the user's locale that indicates the language in which the API response should be formulated.",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  },
  "x-sap-shortText" : "Next generation APIs for operations related to creating and processing Expense Reports"
}
